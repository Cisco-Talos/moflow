##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS :=

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := gentrace

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

ROOT = $(realpath ..)

TRACEDIR = $(ROOT)/libasmir/src/traces

TRACEFORMATDIR = $(ROOT)/libtracewrap/libtrace/src/cpp
TRACEFORMATCOMMON = $(ROOT)/libtracewrap/libtrace/src/common
TRACEFORMATPBDIR = $(TRACEFORMATDIR)/pb
LIBTRACE = $(TRACEFORMATDIR)/libtrace.a

PROTOBUFDIR = $(ROOT)/libtracewrap/libtrace/protobuf/src

ifeq ($(COMPILER),gcc)
	TOOL_CXXFLAGS += -Wno-error
endif
ifeq ($(TARGET_OS),windows)
	TOOL_CXXFLAGS += -Iddk-inc
endif
TOOL_CXXFLAGS += -I$(TRACEFORMATCOMMON) -I../libasmir/include -I../libasmir/src/traces -I$(TRACEFORMATDIR) -I$(TRACEFORMATPBDIR) -I$(PROTOBUFDIR) -I. -DUSING_PIN

# XXX We should probably use libtool
PROTOBUFLIBDIR = $(PROTOBUFDIR)/.libs
TOOL_LDFLAGS += -L$(PROTOBUFLIBDIR)
TOOL_LIBS += $(LIBTRACE) -Wl,-rpath=$(PROTOBUFLIBDIR) -lprotobuf -lz -lpthread

BAPOBJS = $(OBJDIR)pivot$(OBJ_SUFFIX) $(OBJDIR)pin_misc$(OBJ_SUFFIX) $(OBJDIR)pin_taint$(OBJ_SUFFIX) $(OBJDIR)pin_frame$(OBJ_SUFFIX) $(OBJDIR)reg_mapping_pin$(OBJ_SUFFIX) $(OBJDIR)winsyscalls$(OBJ_SUFFIX) $(OBJDIR)snapshot$(OBJ_SUFFIX)

# Build the tool as a dll (shared object).
$(OBJDIR)gentrace$(PINTOOL_SUFFIX): $(OBJDIR)gentrace$(OBJ_SUFFIX) $(BAPOBJS) $(LIBTRACE)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$(OBJDIR)gentrace$(PINTOOL_SUFFIX)  $^ $(TOOL_LPATHS) $(TOOL_LIBS)
