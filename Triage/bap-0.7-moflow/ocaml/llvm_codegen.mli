(** LLVM code generation backend for BAP IL programs.

    Convert BAP programs and expressions to LLVM native code
    objects. The LLVM native code objects are LLVM functions, even
    though the original BAP object may not represent a function.  BAP
    register variables are converted to LLVM globals, and BAP
    temporaries are converted to local LLVM variables in the generated
    LLVM function.  Memory operations can be converted using several
    different modes, as specified by the {!memimpl} type.
*)

(*type ctx*)

(** Conversion modes for emulating memory *)
type memimpl =
    Real
  (** Memory reads and writes directly access the true
      main memory. {b This is unsafe.} *)
  | Func
  (** Replace each memory byte read or written with calls
      to [set_memory] and [get_memory]. *)
  | FuncMulti
  (** Replace each memory operation with calls to
      [set_memory_multi] or [get_memory_multi].  These functions can
      access multiple bytes in the same function call. *)

val string_to_memimpl : string -> memimpl option
(** [string_to_memimpl "Real"] returns [Some Real], and so on. [string_to_memimpl "Garbage"] returns [None] *)

(** [codegen opts memimpl] constructs a class instance for converting
    BAP constructs to LLVM.

    @param opts Apply LLVM optimizations after converting
    @param memimpl The memory conversion mode to use for this converter object
*)
class codegen :
  ?opts:bool -> memimpl ->
object
  method convert_cfg : Cfg.AST.G.t -> Llvm.llvalue
  (** [convert_cfg cfg] converts the BAP cfg [cfg] to LLVM. *)
  method convert_straightline_f : Ast.program -> Llvm.llvalue
  (** [convert_straightline_f p] converts the BAP AST program [p] to LLVM. *)
  method convert_exp : Ast.exp -> Llvm.llvalue
  (** [convert_exp e] converts the BAP expression [e] to LLVM. *)
  method convert_type : Type.typ -> Llvm.lltype
  (** [convert_type t] converts the BAP type [t] to the corresponding LLVM type. *)
  method convert_var : Var.t -> Llvm.llvalue
  (** [convert_var v] converts the BAP variable [v] to a LLVM
      variable.  If [v] is a temporary, the variable will be a local LLVM
      variable.  If [v] is not a temporary, it will be converted to a LLVM
      global. *)
  method dump : unit
  (** Print the current LLVM bytecode to the screen. *)
  method output_bitcode : out_channel -> bool
  (** [output_bitcode oc] outputs the LLVM bitcode for all functions
      generated by the current converter to the output channel [oc]. *)
  method eval_fun :
    ?ctx:(Var.t * Ast.exp) list ->
      Llvm.llvalue -> Ast.exp
(** [eval_fun ctx f] evaluates the LLVM object [f] with the
    input context [ctx], which is a list of variable
    assignments. If [f] was produced with [convert_exp] or
    [convert_var], the returned value will be the evaluated
    expression or variable value.  Otherwise, the return value of
    the BAP program is returned.  If the program terminated
    because it reached a [Halt] instruction, the evaluated halt
    expression is returned.  Otherwise, [true] is returned. *)
end
