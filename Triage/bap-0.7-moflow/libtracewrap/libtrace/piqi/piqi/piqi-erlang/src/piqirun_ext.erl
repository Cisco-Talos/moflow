%% Copyright 2009, 2010, 2011, 2012, 2013 Anton Lavrik
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%

%%
%% @doc Runtime support library for Piqi extended
%%
%% This module is used by modules generated by "piqic-erlang-ext" command-line
%% tool.
%%
-module(piqirun_ext).
-compile(export_all).

-include("piqi_tools.hrl").


-type input_format() :: piqi_convert_input_format().
-type output_format() :: piqi_convert_output_format() | 'json_pretty' | 'xml_pretty'.


-spec convert/5 :: (
    PiqiMod :: atom(), % Erlang module generated by "piqic-erlang-ext"
    TypeName :: string() | binary(),
    InputFormat :: input_format(),
    OutputFormat :: output_format(),
    Data :: binary() ) -> Data :: binary().

% simplified version of convert/6 that doesn't support extra options
convert(PiqiMod, TypeName, InputFormat, OutputFormat, Data) ->
    convert(PiqiMod, TypeName, InputFormat, OutputFormat, Data, []).


-spec convert/6 :: (
    PiqiMod :: atom(), % Erlang module generated by "piqic-erlang-ext"
    TypeName :: string() | binary(),
    InputFormat :: input_format(),
    OutputFormat :: output_format(),
    Data :: binary(),
    Options :: piqi_convert_options() ) -> Data :: binary().

convert(_PiqiMod, _TypeName, X, X, Data, _Options) -> Data;

convert(PiqiMod, TypeName, InputFormat, OutputFormat0, Data, Options0) ->
    {OutputFormat, DefaultOptions} =
        case OutputFormat0 of
            'json_pretty' -> {'json', []};
            'xml_pretty' -> {'xml', []};
            OF ->
                % we need to be explicit here, because pretty-printing is
                % enabled by default
                {OF, [{'pretty_print', false}]}
        end,
    Options =
        case Options0 of
            [] -> DefaultOptions;
            _ -> Options0
        end,
    case piqi_tools:convert(PiqiMod, TypeName, InputFormat, OutputFormat, Data, Options) of
        {ok, X} -> X;
        {error, Error} ->
            throw({'piqirun_ext_error', Error})
    end.

