module rec Stmt_piqi : sig type uint64 = int64 type reg = int type lab = string type asm = string type address = int64 type strattr = string type thread_id = Stmt_piqi.uint64 type bit_length = int type taint_id = Stmt_piqi.uint64 type stmt = [`move of Stmt_piqi.move|`jmp of Stmt_piqi.jmp|`cjmp of Stmt_piqi.cjmp|`label_stmt of Stmt_piqi.label_stmt|`halt of Stmt_piqi.halt|`assert_stmt of Stmt_piqi.assert_stmt|`assume of Stmt_piqi.assume|`comment of Stmt_piqi.comment|`special of Stmt_piqi.special] type typ = [`reg of Stmt_piqi.reg|`tmem of Stmt_piqi.tmem|`array of Stmt_piqi.array] type label = [`name of string|`addr of Stmt_piqi.address] type cast_type = [`cast_unsigned|`cast_signed|`cast_high|`cast_low] type binop_type = [`plus|`minus|`times|`divide|`sdivide|`modbop|`smod|`lshift|`rshift|`arshift|`andbop|`orbop|`xor|`eq|`neq|`lt|`le|`slt|`sle] type unop_type = [`neg|`not] type attribute = [`asm of Stmt_piqi.asm|`address of Stmt_piqi.address|`liveout of Stmt_piqi.liveout|`strattr of Stmt_piqi.strattr|`context of Stmt_piqi.context|`thread_id of Stmt_piqi.thread_id|`synthetic of Stmt_piqi.synthetic|`other of string] type operand_info_specific = [`mem_operand of Stmt_piqi.mem_operand|`reg_operand of Stmt_piqi.reg_operand] type taint_info = [`no_taint|`taint_id of Stmt_piqi.taint_id|`taint_multiple] type exp = [`load of Stmt_piqi.load|`store of Stmt_piqi.store|`binop of Stmt_piqi.binop|`unop of Stmt_piqi.unop|`var of Stmt_piqi.var|`lab of Stmt_piqi.lab|`inte of Stmt_piqi.inte|`cast of Stmt_piqi.cast|`let_exp of Stmt_piqi.let_exp|`unknown of Stmt_piqi.unknown|`ite of Stmt_piqi.ite|`extract of Stmt_piqi.extract|`concat of Stmt_piqi.concat] type program = Stmt_piqi.stmt list type move = Move.t type jmp = Jmp.t type cjmp = Cjmp.t type label_stmt = Label_stmt.t type halt = Halt.t type assert_stmt = Assert_stmt.t type assume = Assume.t type comment = Comment.t type special = Special.t type tmem = Tmem.t type array = Array.t type var = Var.t type attributes = Stmt_piqi.attribute list type liveout = Liveout.t type synthetic = Synthetic.t type reg_operand = Reg_operand.t type operand_usage = Operand_usage.t type mem_operand = Mem_operand.t type context = Context.t type load = Load.t type store = Store.t type binop = Binop.t type unop = Unop.t type inte = Inte.t type cast = Cast.t type let_exp = Let_exp.t type unknown = Unknown.t type ite = Ite.t type extract = Extract.t type concat = Concat.t end = Stmt_piqi and Move : sig type t = {mutable var : Stmt_piqi.var ;mutable exp : Stmt_piqi.exp ;mutable attributes : Stmt_piqi.attributes ;} end = Move and Jmp : sig type t = {mutable exp : Stmt_piqi.exp ;mutable attributes : Stmt_piqi.attributes ;} end = Jmp and Cjmp : sig type t = {mutable cond : Stmt_piqi.exp ;mutable iftrue : Stmt_piqi.exp ;mutable iffalse : Stmt_piqi.exp ;mutable attributes : Stmt_piqi.attributes ;} end = Cjmp and Label_stmt : sig type t = {mutable label : Stmt_piqi.label ;mutable attributes : Stmt_piqi.attributes ;} end = Label_stmt and Halt : sig type t = {mutable exp : Stmt_piqi.exp ;mutable attributes : Stmt_piqi.attributes ;} end = Halt and Assert_stmt : sig type t = {mutable exp : Stmt_piqi.exp ;mutable attributes : Stmt_piqi.attributes ;} end = Assert_stmt and Assume : sig type t = {mutable exp : Stmt_piqi.exp ;mutable attributes : Stmt_piqi.attributes ;} end = Assume and Comment : sig type t = {mutable string : string ;mutable attributes : Stmt_piqi.attributes ;} end = Comment and Special : sig type t = {mutable string : string ;mutable attributes : Stmt_piqi.attributes ;} end = Special and Tmem : sig type t = {mutable index_type : Stmt_piqi.typ ;} end = Tmem and Array : sig type t = {mutable index_type : Stmt_piqi.typ ;mutable element_type : Stmt_piqi.typ ;} end = Array and Var : sig type t = {mutable name : string ;mutable id : int ;mutable typ : Stmt_piqi.typ ;} end = Var and Liveout : sig type t = {_dummy: unit} end = Liveout and Synthetic : sig type t = {_dummy: unit} end = Synthetic and Reg_operand : sig type t = {mutable name : string ;} end = Reg_operand and Operand_usage : sig type t = {mutable read : bool ;mutable written : bool ;mutable index : bool ;mutable base : bool ;} end = Operand_usage and Mem_operand : sig type t = {mutable address : Stmt_piqi.address ;} end = Mem_operand and Context : sig type t = {mutable operand_info_specific : Stmt_piqi.operand_info_specific ;mutable bit_length : Stmt_piqi.bit_length ;mutable operand_usage : Stmt_piqi.operand_usage ;mutable taint_info : Stmt_piqi.taint_info ;mutable value : string ;} end = Context and Load : sig type t = {mutable memory : Stmt_piqi.exp ;mutable address : Stmt_piqi.exp ;mutable endian : Stmt_piqi.exp ;mutable typ : Stmt_piqi.typ ;} end = Load and Store : sig type t = {mutable memory : Stmt_piqi.exp ;mutable address : Stmt_piqi.exp ;mutable value : Stmt_piqi.exp ;mutable endian : Stmt_piqi.exp ;mutable typ : Stmt_piqi.typ ;} end = Store and Binop : sig type t = {mutable binop_type : Stmt_piqi.binop_type ;mutable lexp : Stmt_piqi.exp ;mutable rexp : Stmt_piqi.exp ;} end = Binop and Unop : sig type t = {mutable unop_type : Stmt_piqi.unop_type ;mutable exp : Stmt_piqi.exp ;} end = Unop and Inte : sig type t = {mutable int : string ;mutable typ : Stmt_piqi.typ ;} end = Inte and Cast : sig type t = {mutable cast_type : Stmt_piqi.cast_type ;mutable new_type : Stmt_piqi.typ ;mutable exp : Stmt_piqi.exp ;} end = Cast and Let_exp : sig type t = {mutable var : Stmt_piqi.var ;mutable e1 : Stmt_piqi.exp ;mutable e2 : Stmt_piqi.exp ;} end = Let_exp and Unknown : sig type t = {mutable string : string ;mutable typ : Stmt_piqi.typ ;} end = Unknown and Ite : sig type t = {mutable condition : Stmt_piqi.exp ;mutable iftrue : Stmt_piqi.exp ;mutable iffalse : Stmt_piqi.exp ;} end = Ite and Extract : sig type t = {mutable hbit : int ;mutable lbit : int ;mutable exp : Stmt_piqi.exp ;} end = Extract and Concat : sig type t = {mutable le : Stmt_piqi.exp ;mutable re : Stmt_piqi.exp ;} end = Concat include Stmt_piqi
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inte x  in `inte res | 8 -> let res =   parse_cast x  in `cast res | 9 -> let res =   parse_let_exp x  in `let_exp res | 10 -> let res =   parse_unknown x  in `unknown res | 11 -> let res =   parse_ite x  in `ite res | 12 -> let res =   parse_extract x  in `extract res | 13 -> let res =   parse_concat x  in `concat res | _ -> Piqirun.error_variant x code  and parse_load x = let x = Piqirun.parse_record x in  let _memory, x = Piqirun.parse_required_field 1 parse_exp   x  in let _address, x = Piqirun.parse_required_field 2 parse_exp   x  in let _endian, x = Piqirun.parse_required_field 3 parse_exp   x  in let _typ, x = Piqirun.parse_required_field 4 parse_typ   x  in Piqirun.check_unparsed_fields x; {Load.memory = _memory ;Load.address = _address ;Load.endian = _endian ;Load.typ = _typ ;}  and parse_store x = let x = Piqirun.parse_record x in  let _memory, x = Piqirun.parse_required_field 1 parse_exp   x  in let _address, x = Piqirun.parse_required_field 2 parse_exp   x  in let _value, x = Piqirun.parse_required_field 3 parse_exp   x  in let _endian, x = Piqirun.parse_required_field 4 parse_exp   x  in let _typ, x = Piqirun.parse_required_field 5 parse_typ   x  in Piqirun.check_unparsed_fields x; {Store.memory = _memory ;Store.address = _address ;Store.value = _value ;Store.endian = _endian ;Store.typ = _typ ;}  and parse_binop x = let x = Piqirun.parse_record x in  let _binop_type, x = Piqirun.parse_required_field 1 parse_binop_type   x  in let _lexp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _rexp, x = Piqirun.parse_required_field 3 parse_exp   x  in Piqirun.check_unparsed_fields x; {Binop.binop_type = _binop_type ;Binop.lexp = _lexp ;Binop.rexp = _rexp ;}  and parse_unop x = let x = Piqirun.parse_record x in  let _unop_type, x = Piqirun.parse_required_field 1 parse_unop_type   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in Piqirun.check_unparsed_fields x; {Unop.unop_type = _unop_type ;Unop.exp = _exp ;}  and parse_inte x = let x = Piqirun.parse_record x in  let _int, x = Piqirun.parse_required_field 1 parse_string   x  in let _typ, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Inte.int = _int ;Inte.typ = _typ ;}  and parse_cast x = let x = Piqirun.parse_record x in  let _cast_type, x = Piqirun.parse_required_field 1 parse_cast_type   x  in let _new_type, x = Piqirun.parse_required_field 2 parse_typ   x  in let _exp, x = Piqirun.parse_required_field 3 parse_exp   x  in Piqirun.check_unparsed_fields x; {Cast.cast_type = _cast_type ;Cast.new_type = _new_type ;Cast.exp = _exp ;}  and parse_let_exp x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _e1, x = Piqirun.parse_required_field 2 parse_exp   x  in let _e2, x = Piqirun.parse_required_field 3 parse_exp   x  in Piqirun.check_unparsed_fields x; {Let_exp.var = _var ;Let_exp.e1 = _e1 ;Let_exp.e2 = _e2 ;}  and parse_unknown x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _typ, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Unknown.string = _string ;Unknown.typ = _typ ;}  and parse_ite x = let x = Piqirun.parse_record x in  let _condition, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in Piqirun.check_unparsed_fields x; {Ite.condition = _condition ;Ite.iftrue = _iftrue ;Ite.iffalse = _iffalse ;}  and parse_extract x = let x = Piqirun.parse_record x in  let _hbit, x = Piqirun.parse_required_field 1 parse_int   x  in let _lbit, x = Piqirun.parse_required_field 2 parse_int   x  in let _exp, x = Piqirun.parse_required_field 3 parse_exp   x  in Piqirun.check_unparsed_fields x; {Extract.hbit = _hbit ;Extract.lbit = _lbit ;Extract.exp = _exp ;}  and parse_concat x = let x = Piqirun.parse_record x in  let _le, x = Piqirun.parse_required_field 1 parse_exp   x  in let _re, x = Piqirun.parse_required_field 2 parse_exp   x  in Piqirun.check_unparsed_fields x; {Concat.le = _le ;Concat.re = _re ;}  
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__inte 7 x| `cast x -> gen__cast 8 x| `let_exp x -> gen__let_exp 9 x| `unknown x -> gen__unknown 10 x| `ite x -> gen__ite 11 x| `extract x -> gen__extract 12 x| `concat x -> gen__concat 13 x )] and gen__load code x =  let _memory = Piqirun.gen_required_field 1 gen__exp x.Load.memory in let _address = Piqirun.gen_required_field 2 gen__exp x.Load.address in let _endian = Piqirun.gen_required_field 3 gen__exp x.Load.endian in let _typ = Piqirun.gen_required_field 4 gen__typ x.Load.typ in  Piqirun.gen_record code [ _memory;_address;_endian;_typ ] and gen__store code x =  let _memory = Piqirun.gen_required_field 1 gen__exp x.Store.memory in let _address = Piqirun.gen_required_field 2 gen__exp x.Store.address in let _value = Piqirun.gen_required_field 3 gen__exp x.Store.value in let _endian = Piqirun.gen_required_field 4 gen__exp x.Store.endian in let _typ = Piqirun.gen_required_field 5 gen__typ x.Store.typ in  Piqirun.gen_record code [ _memory;_address;_value;_endian;_typ ] and gen__binop code x =  let _binop_type = Piqirun.gen_required_field 1 gen__binop_type x.Binop.binop_type in let _lexp = Piqirun.gen_required_field 2 gen__exp x.Binop.lexp in let _rexp = Piqirun.gen_required_field 3 gen__exp x.Binop.rexp in  Piqirun.gen_record code [ _binop_type;_lexp;_rexp ] and gen__unop code x =  let _unop_type = Piqirun.gen_required_field 1 gen__unop_type x.Unop.unop_type in let _exp = Piqirun.gen_required_field 2 gen__exp x.Unop.exp in  Piqirun.gen_record code [ _unop_type;_exp ] and gen__inte code x =  let _int = Piqirun.gen_required_field 1 gen__string x.Inte.int in let _typ = Piqirun.gen_required_field 2 gen__typ x.Inte.typ in  Piqirun.gen_record code [ _int;_typ ] and gen__cast code x =  let _cast_type = Piqirun.gen_required_field 1 gen__cast_type x.Cast.cast_type in let _new_type = Piqirun.gen_required_field 2 gen__typ x.Cast.new_type in let _exp = Piqirun.gen_required_field 3 gen__exp x.Cast.exp in  Piqirun.gen_record code [ _cast_type;_new_type;_exp ] and gen__let_exp code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Let_exp.var in let _e1 = Piqirun.gen_required_field 2 gen__exp x.Let_exp.e1 in let _e2 = Piqirun.gen_required_field 3 gen__exp x.Let_exp.e2 in  Piqirun.gen_record code [ _var;_e1;_e2 ] and gen__unknown code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Unknown.string in let _typ = Piqirun.gen_required_field 2 gen__typ x.Unknown.typ in  Piqirun.gen_record code [ _string;_typ ] and gen__ite code x =  let _condition = Piqirun.gen_required_field 1 gen__exp x.Ite.condition in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Ite.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Ite.iffalse in  Piqirun.gen_record code [ _condition;_iftrue;_iffalse ] and gen__extract code x =  let _hbit = Piqirun.gen_required_field 1 gen__int x.Extract.hbit in let _lbit = Piqirun.gen_required_field 2 gen__int x.Extract.lbit in let _exp = Piqirun.gen_required_field 3 gen__exp x.Extract.exp in  Piqirun.gen_record code [ _hbit;_lbit;_exp ] and gen__concat code x =  let _le = Piqirun.gen_required_field 1 gen__exp x.Concat.le in let _re = Piqirun.gen_required_field 2 gen__exp x.Concat.re in  Piqirun.gen_record code [ _le;_re ] 

 let gen_string x = gen__string (-1) x
let gen_int x = gen__int (-1) x
let gen_int64 x = gen__int64 (-1) x
let gen_uint64 x = gen__uint64 (-1) x
let gen_bool x = gen__bool (-1) x
let gen_program x = gen__program (-1) x
let gen_stmt x = gen__stmt (-1) x
let gen_move x = gen__move (-1) x
let gen_jmp x = gen__jmp (-1) x
let gen_cjmp x = gen__cjmp (-1) x
let gen_label_stmt x = gen__label_stmt (-1) x
let gen_halt x = gen__halt (-1) x
let gen_assert_stmt x = gen__assert_stmt (-1) x
let gen_assume x = gen__assume (-1) x
let gen_comment x = gen__comment (-1) x
let gen_special x = gen__special (-1) x
let gen_typ x = gen__typ (-1) x
let gen_reg x = gen__reg (-1) x
let gen_tmem x = gen__tmem (-1) x
let gen_array x = gen__array (-1) x
let gen_label x = gen__label (-1) x
let gen_cast_type x = gen__cast_type (-1) x
let gen_binop_type x = gen__binop_type (-1) x
let gen_unop_type x = gen__unop_type (-1) x
let gen_var x = gen__var (-1) x
let gen_lab x = gen__lab (-1) x
let gen_attribute x = gen__attribute (-1) x
let gen_attributes x = gen__attributes (-1) x
let gen_asm x = gen__asm (-1) x
let gen_address x = gen__address (-1) x
let gen_liveout x = gen__liveout (-1) x
let gen_synthetic x = gen__synthetic (-1) x
let gen_strattr x = gen__strattr (-1) x
let gen_thread_id x = gen__thread_id (-1) x
let gen_operand_info_specific x = gen__operand_info_specific (-1) x
let gen_reg_operand x = gen__reg_operand (-1) x
let gen_bit_length x = gen__bit_length (-1) x
let gen_taint_id x = gen__taint_id (-1) x
let gen_operand_usage x = gen__operand_usage (-1) x
let gen_mem_operand x = gen__mem_operand (-1) x
let gen_taint_info x = gen__taint_info (-1) x
let gen_context x = gen__context (-1) x
let gen_exp x = gen__exp (-1) x
let gen_load x = gen__load (-1) x
let gen_store x = gen__store (-1) x
let gen_binop x = gen__binop (-1) x
let gen_unop x = gen__unop (-1) x
let gen_inte x = gen__inte (-1) x
let gen_cast x = gen__cast (-1) x
let gen_let_exp x = gen__let_exp (-1) x
let gen_unknown x = gen__unknown (-1) x
let gen_ite x = gen__ite (-1) x
let gen_extract x = gen__extract (-1) x
let gen_concat x = gen__concat (-1) x
 
let piqi = ["\226\202\2304\004stmt\160\148\209H\129\248\174h\218\244\134\182\012\029\242\197\227\236\003\023\218\164\238\191\004\007program\210\171\158\194\006\004stmt\218\244\134\182\012\226\001\170\136\200\184\014\219\001\218\164\238\191\004\004stmt\170\183\218\222\005\015\232\146\150q\002\210\171\158\194\006\004move\170\183\218\222\005\014\232\146\150q\004\210\171\158\194\006\003jmp\170\183\218\222\005\015\232\146\150q\006\210\171\158\194\006\004cjmp\170\183\218\222\005\021\232\146\150q\b\210\171\158\194\006\nlabel-stmt\170\183\218\222\005\015\232\146\150q\n\210\171\158\194\006\004halt\170\183\218\222\005\022\232\146\150q\012\210\171\158\194\006\011assert-stmt\170\183\218\222\005\017\232\146\150q\014\210\171\158\194\006\006assume\170\183\218\222\005\018\232\146\150q\016\210\171\158\194\006\007comment\170\183\218\222\005\018\232\146\150q\018\210\171\158\194\006\007special\218\244\134\182\012_\138\233\142\251\014Y\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003var\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\004move\218\244\134\182\012F\138\233\142\251\014@\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\003jmp\218\244\134\182\012\155\001\138\233\142\251\014\148\001\210\203\242$\029\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004cond\210\171\158\194\006\003exp\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\006iftrue\210\171\158\194\006\003exp\210\203\242$ \152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\007iffalse\210\171\158\194\006\003exp\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\004cjmp\218\244\134\182\012O\138\233\142\251\014I\210\203\242$\021\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\005label\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\nlabel-stmt\218\244\134\182\012G\138\233\142\251\014A\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\004halt\218\244\134\182\012N\138\233\142\251\014H\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\011assert-stmt\218\244\134\182\012I\138\233\142\251\014C\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\006assume\218\244\134\182\012M\138\233\142\251\014G\210\203\242$\022\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\006string\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\007comment\218\244\134\182\012M\138\233\142\251\014G\210\203\242$\022\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\006string\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nattributes\218\164\238\191\004\007special\218\244\134\182\012N\170\136\200\184\014H\218\164\238\191\004\003typ\170\183\218\222\005\014\232\146\150q\002\210\171\158\194\006\003reg\170\183\218\222\005\015\232\146\150q\004\210\171\158\194\006\004tmem\170\183\218\222\005\016\232\146\150q\006\210\171\158\194\006\005array\218\244\134\182\012\023\130\153\170d\018\218\164\238\191\004\003reg\210\171\158\194\006\003int\218\244\134\182\0128\138\233\142\251\0142\210\203\242$#\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\nindex-type\210\171\158\194\006\003typ\218\164\238\191\004\004tmem\218\244\134\182\012c\138\233\142\251\014]\210\203\242$#\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\nindex-type\210\171\158\194\006\003typ\210\203\242$%\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\012element-type\210\171\158\194\006\003typ\218\164\238\191\004\005array\218\244\134\182\012J\170\136\200\184\014D\218\164\238\191\004\005label\170\183\218\222\005\022\218\164\238\191\004\004name\210\171\158\194\006\006string\170\183\218\222\005\023\218\164\238\191\004\004addr\210\171\158\194\006\007address\218\244\134\182\012\130\001\138\176\205\197\001|\218\164\238\191\004\tcast-type\170\183\218\222\005\024\232\146\150q\002\218\164\238\191\004\rcast-unsigned\170\183\218\222\005\022\232\146\150q\004\218\164\238\191\004\011cast-signed\170\183\218\222\005\020\232\146\150q\006\218\164\238\191\004\tcast-high\170\183\218\222\005\019\232\146\150q\b\218\164\238\191\004\bcast-low\218\244\134\182\012\175\003\138\176\205\197\001\168\003\218\164\238\191\004\nbinop-type\170\183\218\222\005\015\232\146\150q\002\218\164\238\191\004\004plus\170\183\218\222\005\016\232\146\150q\004\218\164\238\191\004\005minus\170\183\218\222\005\016\232\146\150q\006\218\164\238\191\004\005times\170\183\218\222\005\017\232\146\150q\b\218\164\238\191\004\006divide\170\183\218\222\005\018\232\146\150q\n\218\164\238\191\004\007sdivide\170\183\218\222\005\017\232\146\150q\012\218\164\238\191\004\006modbop\170\183\218\222\005\015\232\146\150q\014\218\164\238\191\004\004smod\170\183\218\222\005\017\232\146\150q\016\218\164\238\191\004\006lshift\170\183\218\222\005\017\232\146\150q\018\218\164\238\191\004\006rshift\170\183\218\222\005\018\232\146\150q\020\218\164\238\191\004\007arshift\170\183\218\222\005\017\232\146\150q\022\218\164\238\191\004\006andbop\170\183\218\222\005\016\232\146\150q\024\218\164\238\191\004\005orbop\170\183\218\222\005\014\232\146\150q\026\218\164\238\191\004\003xor\170\183\218\222\005\r\232\146\150q\028\218\164\238\191\004\002eq\170\183\218\222\005\014\232\146\150q\030\218\164\238\191\004\003neq\170\183\218\222\005\r\232\146\150q \218\164\238\191\004\002lt\170\183\218\222\005\r\232\146\150q\"\218\164\238\191\004\002le\170\183\218\222\005\014\232\146\150q$\218\164\238\191\004\003slt\170\183\218\222\005\014\232\146\150q&\218\164\238\191\004\003sle\218\244\134\182\012=\138\176\205\197\0017\218\164\238\191\004\tunop-type\170\183\218\222\005\014\232\146\150q\002\218\164\238\191\004\003neg\170\183\218\222\005\014\232\146\150q\004\218\164\238\191\004\003not\218\244\134\182\012l\138\233\142\251\014f\210\203\242$ \152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004name\210\171\158\194\006\006string\210\203\242$\027\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\002id\210\171\158\194\006\003int\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003typ\218\164\238\191\004\003var\218\244\134\182\012\026\130\153\170d\021\218\164\238\191\004\003lab\210\171\158\194\006\006string\218\244\134\182\012\224\001\170\136\200\184\014\217\001\218\164\238\191\004\tattribute\170\183\218\222\005\014\232\146\150q\002\210\171\158\194\006\003asm\170\183\218\222\005\018\232\146\150q\004\210\171\158\194\006\007address\170\183\218\222\005\018\232\146\150q\006\210\171\158\194\006\007liveout\170\183\218\222\005\018\232\146\150q\b\210\171\158\194\006\007strattr\170\183\218\222\005\018\232\146\150q\n\210\171\158\194\006\007context\170\183\218\222\005\020\232\146\150q\012\210\171\158\194\006\tthread-id\170\183\218\222\005\020\232\146\150q\014\210\171\158\194\006\tsynthetic\170\183\218\222\005\028\232\146\150q\016\218\164\238\191\004\005other\210\171\158\194\006\006string\218\244\134\182\012%\242\197\227\236\003\031\218\164\238\191\004\nattributes\210\171\158\194\006\tattribute\218\244\134\182\012\026\130\153\170d\021\218\164\238\191\004\003asm\210\171\158\194\006\006string\218\244\134\182\012\029\130\153\170d\024\218\164\238\191\004\007address\210\171\158\194\006\005int64\218\244\134\182\012\019\138\233\142\251\014\r\218\164\238\191\004\007liveout\218\244\134\182\012\021\138\233\142\251\014\015\218\164\238\191\004\tsynthetic\218\244\134\182\012\030\130\153\170d\025\218\164\238\191\004\007strattr\210\171\158\194\006\006string\218\244\134\182\012 \130\153\170d\027\218\164\238\191\004\tthread-id\210\171\158\194\006\006uint64\218\244\134\182\012Y\170\136\200\184\014S\218\164\238\191\004\021operand-info-specific\170\183\218\222\005\022\232\146\150q\002\210\171\158\194\006\011mem-operand\170\183\218\222\005\022\232\146\150q\004\210\171\158\194\006\011reg-operand\218\244\134\182\012A\138\233\142\251\014;\210\203\242$%\232\146\150q\002\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004name\210\171\158\194\006\006string\218\164\238\191\004\011reg-operand\218\244\134\182\012\030\130\153\170d\025\218\164\238\191\004\nbit-length\210\171\158\194\006\003int\218\244\134\182\012\031\130\153\170d\026\218\164\238\191\004\btaint-id\210\171\158\194\006\006uint64\218\244\134\182\012\190\001\138\233\142\251\014\183\001\210\203\242$#\232\146\150q\002\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004read\210\171\158\194\006\004bool\210\203\242$&\232\146\150q\004\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\007written\210\171\158\194\006\004bool\210\203\242$$\232\146\150q\006\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\005index\210\171\158\194\006\004bool\210\203\242$#\232\146\150q\b\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004base\210\171\158\194\006\004bool\218\164\238\191\004\roperand-usage\218\244\134\182\0128\138\233\142\251\0142\210\203\242$\028\232\146\150q\002\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\007address\218\164\238\191\004\011mem-operand\218\244\134\182\012g\170\136\200\184\014a\218\164\238\191\004\ntaint-info\170\183\218\222\005\019\232\146\150q\002\218\164\238\191\004\bno-taint\170\183\218\222\005\019\232\146\150q\004\210\171\158\194\006\btaint-id\170\183\218\222\005\025\232\146\150q\006\218\164\238\191\004\014taint-multiple\218\244\134\182\012\221\001\138\233\142\251\014\214\001\210\203\242$*\232\146\150q\002\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\021operand-info-specific\210\203\242$\031\232\146\150q\004\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nbit-length\210\203\242$\"\232\146\150q\006\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\roperand-usage\210\203\242$\031\232\146\150q\b\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\ntaint-info\210\203\242$&\232\146\150q\n\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\005value\210\171\158\194\006\006string\218\164\238\191\004\007context\218\244\134\182\012\171\002\170\136\200\184\014\164\002\218\164\238\191\004\003exp\170\183\218\222\005\015\232\146\150q\002\210\171\158\194\006\004load\170\183\218\222\005\016\232\146\150q\004\210\171\158\194\006\005store\170\183\218\222\005\016\232\146\150q\006\210\171\158\194\006\005binop\170\183\218\222\005\015\232\146\150q\b\210\171\158\194\006\004unop\170\183\218\222\005\014\232\146\150q\n\210\171\158\194\006\003var\170\183\218\222\005\014\232\146\150q\012\210\171\158\194\006\003lab\170\183\218\222\005\015\232\146\150q\014\210\171\158\194\006\004inte\170\183\218\222\005\015\232\146\150q\016\210\171\158\194\006\004cast\170\183\218\222\005\018\232\146\150q\018\210\171\158\194\006\007let-exp\170\183\218\222\005\018\232\146\150q\020\210\171\158\194\006\007unknown\170\183\218\222\005\014\232\146\150q\022\210\171\158\194\006\003ite\170\183\218\222\005\018\232\146\150q\024\210\171\158\194\006\007extract\170\183\218\222\005\017\232\146\150q\026\210\171\158\194\006\006concat\218\244\134\182\012\150\001\138\233\142\251\014\143\001\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\006memory\210\171\158\194\006\003exp\210\203\242$ \152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\007address\210\171\158\194\006\003exp\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\006endian\210\171\158\194\006\003exp\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003typ\218\164\238\191\004\004load\218\244\134\182\012\186\001\138\233\142\251\014\179\001\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\006memory\210\171\158\194\006\003exp\210\203\242$ \152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\007address\210\171\158\194\006\003exp\210\203\242$\030\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\005value\210\171\158\194\006\003exp\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\006endian\210\171\158\194\006\003exp\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003typ\218\164\238\191\004\005store\218\244\134\182\012t\138\233\142\251\014n\210\203\242$\026\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\nbinop-type\210\203\242$\029\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004lexp\210\171\158\194\006\003exp\210\203\242$\029\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004rexp\210\171\158\194\006\003exp\218\164\238\191\004\005binop\218\244\134\182\012F\138\233\142\251\014@\210\203\242$\025\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\tunop-type\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\218\164\238\191\004\004unop\218\244\134\182\012L\138\233\142\251\014F\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\003int\210\171\158\194\006\006string\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003typ\218\164\238\191\004\004inte\218\244\134\182\012l\138\233\142\251\014f\210\203\242$\025\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\tcast-type\210\203\242$!\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\bnew-type\210\171\158\194\006\003typ\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\218\164\238\191\004\004cast\218\244\134\182\012k\138\233\142\251\014e\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003var\210\203\242$\027\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\002e1\210\171\158\194\006\003exp\210\203\242$\027\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\002e2\210\171\158\194\006\003exp\218\164\238\191\004\007let-exp\218\244\134\182\012F\138\233\142\251\014@\210\203\242$\022\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\006string\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003typ\218\164\238\191\004\007unknown\218\244\134\182\012\127\138\233\142\251\014y\210\203\242$\"\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\tcondition\210\171\158\194\006\003exp\210\203\242$\031\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\006iftrue\210\171\158\194\006\003exp\210\203\242$ \152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\007iffalse\210\171\158\194\006\003exp\218\164\238\191\004\003ite\218\244\134\182\012o\138\233\142\251\014i\210\203\242$\029\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004hbit\210\171\158\194\006\003int\210\203\242$\029\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\004lbit\210\171\158\194\006\003int\210\203\242$\019\152\182\154\152\004\223\162\138\147\001\210\171\158\194\006\003exp\218\164\238\191\004\007extract\218\244\134\182\012R\138\233\142\251\014L\210\203\242$\027\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\002le\210\171\158\194\006\003exp\210\203\242$\027\152\182\154\152\004\223\162\138\147\001\218\164\238\191\004\002re\210\171\158\194\006\003exp\218\164\238\191\004\006concat"]