// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frame.piqi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_info_specific_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_info_specific_reflection_ = NULL;
const ::google::protobuf::Descriptor* reg_operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reg_operand_reflection_ = NULL;
const ::google::protobuf::Descriptor* mem_operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mem_operand_reflection_ = NULL;
const ::google::protobuf::Descriptor* operand_usage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operand_usage_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* std_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  std_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* syscall_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syscall_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* argument_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  argument_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* exception_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exception_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_intro_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_intro_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_intro_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_intro_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* taint_intro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taint_intro_reflection_ = NULL;
const ::google::protobuf::Descriptor* modload_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modload_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* key_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  key_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagged_value_lists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagged_value_lists_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagged_value_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagged_value_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* value_source_tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  value_source_tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* value_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  value_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* value_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  value_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_frame_2epiqi_2eproto() {
  protobuf_AddDesc_frame_2epiqi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "frame.piqi.proto");
  GOOGLE_CHECK(file != NULL);
  frame_descriptor_ = file->message_type(0);
  static const int frame_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, std_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, syscall_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, exception_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, taint_intro_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, modload_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, key_frame_),
  };
  frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      frame_descriptor_,
      frame::default_instance_,
      frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(frame));
  operand_list_descriptor_ = file->message_type(1);
  static const int operand_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_list, elem_),
  };
  operand_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_list_descriptor_,
      operand_list::default_instance_,
      operand_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_list));
  operand_info_descriptor_ = file->message_type(2);
  static const int operand_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, operand_info_specific_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, bit_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, operand_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, taint_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, value_),
  };
  operand_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_info_descriptor_,
      operand_info::default_instance_,
      operand_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_info));
  operand_info_specific_descriptor_ = file->message_type(3);
  static const int operand_info_specific_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info_specific, mem_operand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info_specific, reg_operand_),
  };
  operand_info_specific_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_info_specific_descriptor_,
      operand_info_specific::default_instance_,
      operand_info_specific_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info_specific, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_info_specific, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_info_specific));
  reg_operand_descriptor_ = file->message_type(4);
  static const int reg_operand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, name_),
  };
  reg_operand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reg_operand_descriptor_,
      reg_operand::default_instance_,
      reg_operand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_operand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reg_operand));
  mem_operand_descriptor_ = file->message_type(5);
  static const int mem_operand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, address_),
  };
  mem_operand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mem_operand_descriptor_,
      mem_operand::default_instance_,
      mem_operand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mem_operand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mem_operand));
  operand_usage_descriptor_ = file->message_type(6);
  static const int operand_usage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, base_),
  };
  operand_usage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operand_usage_descriptor_,
      operand_usage::default_instance_,
      operand_usage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operand_usage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operand_usage));
  taint_info_descriptor_ = file->message_type(7);
  static const int taint_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, no_taint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, taint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, taint_multiple_),
  };
  taint_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_info_descriptor_,
      taint_info::default_instance_,
      taint_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_info));
  std_frame_descriptor_ = file->message_type(8);
  static const int std_frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, rawbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, operand_list_),
  };
  std_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      std_frame_descriptor_,
      std_frame::default_instance_,
      std_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(std_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(std_frame));
  syscall_frame_descriptor_ = file->message_type(9);
  static const int syscall_frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, argument_list_),
  };
  syscall_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syscall_frame_descriptor_,
      syscall_frame::default_instance_,
      syscall_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syscall_frame));
  argument_list_descriptor_ = file->message_type(10);
  static const int argument_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(argument_list, elem_),
  };
  argument_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      argument_list_descriptor_,
      argument_list::default_instance_,
      argument_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(argument_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(argument_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(argument_list));
  exception_frame_descriptor_ = file->message_type(11);
  static const int exception_frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, exception_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, from_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, to_addr_),
  };
  exception_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exception_frame_descriptor_,
      exception_frame::default_instance_,
      exception_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exception_frame));
  taint_intro_frame_descriptor_ = file->message_type(12);
  static const int taint_intro_frame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_frame, taint_intro_list_),
  };
  taint_intro_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_intro_frame_descriptor_,
      taint_intro_frame::default_instance_,
      taint_intro_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_intro_frame));
  taint_intro_list_descriptor_ = file->message_type(13);
  static const int taint_intro_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_list, elem_),
  };
  taint_intro_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_intro_list_descriptor_,
      taint_intro_list::default_instance_,
      taint_intro_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_intro_list));
  taint_intro_descriptor_ = file->message_type(14);
  static const int taint_intro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, taint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, offset_),
  };
  taint_intro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taint_intro_descriptor_,
      taint_intro::default_instance_,
      taint_intro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taint_intro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taint_intro));
  modload_frame_descriptor_ = file->message_type(15);
  static const int modload_frame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modload_frame, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modload_frame, low_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modload_frame, high_address_),
  };
  modload_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modload_frame_descriptor_,
      modload_frame::default_instance_,
      modload_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modload_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modload_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modload_frame));
  key_frame_descriptor_ = file->message_type(16);
  static const int key_frame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_frame, tagged_value_lists_),
  };
  key_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      key_frame_descriptor_,
      key_frame::default_instance_,
      key_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(key_frame));
  tagged_value_lists_descriptor_ = file->message_type(17);
  static const int tagged_value_lists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_lists, elem_),
  };
  tagged_value_lists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagged_value_lists_descriptor_,
      tagged_value_lists::default_instance_,
      tagged_value_lists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_lists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_lists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagged_value_lists));
  tagged_value_list_descriptor_ = file->message_type(18);
  static const int tagged_value_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_list, value_source_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_list, value_list_),
  };
  tagged_value_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagged_value_list_descriptor_,
      tagged_value_list::default_instance_,
      tagged_value_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagged_value_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagged_value_list));
  value_source_tag_descriptor_ = file->message_type(19);
  static const int value_source_tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_source_tag, no_thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_source_tag, thread_id_),
  };
  value_source_tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      value_source_tag_descriptor_,
      value_source_tag::default_instance_,
      value_source_tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_source_tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_source_tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(value_source_tag));
  value_list_descriptor_ = file->message_type(20);
  static const int value_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_list, elem_),
  };
  value_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      value_list_descriptor_,
      value_list::default_instance_,
      value_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(value_list));
  value_info_descriptor_ = file->message_type(21);
  static const int value_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, operand_info_specific_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, bit_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, taint_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, value_),
  };
  value_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      value_info_descriptor_,
      value_info::default_instance_,
      value_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(value_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_frame_2epiqi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    frame_descriptor_, &frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_list_descriptor_, &operand_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_info_descriptor_, &operand_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_info_specific_descriptor_, &operand_info_specific::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reg_operand_descriptor_, &reg_operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mem_operand_descriptor_, &mem_operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operand_usage_descriptor_, &operand_usage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_info_descriptor_, &taint_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    std_frame_descriptor_, &std_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syscall_frame_descriptor_, &syscall_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    argument_list_descriptor_, &argument_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exception_frame_descriptor_, &exception_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_intro_frame_descriptor_, &taint_intro_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_intro_list_descriptor_, &taint_intro_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taint_intro_descriptor_, &taint_intro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modload_frame_descriptor_, &modload_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    key_frame_descriptor_, &key_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagged_value_lists_descriptor_, &tagged_value_lists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagged_value_list_descriptor_, &tagged_value_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    value_source_tag_descriptor_, &value_source_tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    value_list_descriptor_, &value_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    value_info_descriptor_, &value_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_frame_2epiqi_2eproto() {
  delete frame::default_instance_;
  delete frame_reflection_;
  delete operand_list::default_instance_;
  delete operand_list_reflection_;
  delete operand_info::default_instance_;
  delete operand_info_reflection_;
  delete operand_info_specific::default_instance_;
  delete operand_info_specific_reflection_;
  delete reg_operand::default_instance_;
  delete reg_operand_reflection_;
  delete mem_operand::default_instance_;
  delete mem_operand_reflection_;
  delete operand_usage::default_instance_;
  delete operand_usage_reflection_;
  delete taint_info::default_instance_;
  delete taint_info_reflection_;
  delete std_frame::default_instance_;
  delete std_frame_reflection_;
  delete syscall_frame::default_instance_;
  delete syscall_frame_reflection_;
  delete argument_list::default_instance_;
  delete argument_list_reflection_;
  delete exception_frame::default_instance_;
  delete exception_frame_reflection_;
  delete taint_intro_frame::default_instance_;
  delete taint_intro_frame_reflection_;
  delete taint_intro_list::default_instance_;
  delete taint_intro_list_reflection_;
  delete taint_intro::default_instance_;
  delete taint_intro_reflection_;
  delete modload_frame::default_instance_;
  delete modload_frame_reflection_;
  delete key_frame::default_instance_;
  delete key_frame_reflection_;
  delete tagged_value_lists::default_instance_;
  delete tagged_value_lists_reflection_;
  delete tagged_value_list::default_instance_;
  delete tagged_value_list_reflection_;
  delete value_source_tag::default_instance_;
  delete value_source_tag_reflection_;
  delete value_list::default_instance_;
  delete value_list_reflection_;
  delete value_info::default_instance_;
  delete value_info_reflection_;
}

void protobuf_AddDesc_frame_2epiqi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020frame.piqi.proto\"\355\001\n\005frame\022\035\n\tstd_fram"
    "e\030\001 \001(\0132\n.std_frame\022%\n\rsyscall_frame\030\002 \001"
    "(\0132\016.syscall_frame\022)\n\017exception_frame\030\003 "
    "\001(\0132\020.exception_frame\022-\n\021taint_intro_fra"
    "me\030\004 \001(\0132\022.taint_intro_frame\022%\n\rmodload_"
    "frame\030\005 \001(\0132\016.modload_frame\022\035\n\tkey_frame"
    "\030\006 \001(\0132\n.key_frame\"+\n\014operand_list\022\033\n\004el"
    "em\030\001 \003(\0132\r.operand_info\"\260\001\n\014operand_info"
    "\0225\n\025operand_info_specific\030\001 \002(\0132\026.operan"
    "d_info_specific\022\022\n\nbit_length\030\002 \002(\021\022%\n\ro"
    "perand_usage\030\003 \002(\0132\016.operand_usage\022\037\n\nta"
    "int_info\030\004 \002(\0132\013.taint_info\022\r\n\005value\030\005 \002"
    "(\014\"]\n\025operand_info_specific\022!\n\013mem_opera"
    "nd\030\001 \001(\0132\014.mem_operand\022!\n\013reg_operand\030\002 "
    "\001(\0132\014.reg_operand\"\033\n\013reg_operand\022\014\n\004name"
    "\030\001 \002(\t\"\036\n\013mem_operand\022\017\n\007address\030\001 \002(\004\"K"
    "\n\roperand_usage\022\014\n\004read\030\001 \002(\010\022\017\n\007written"
    "\030\002 \002(\010\022\r\n\005index\030\003 \002(\010\022\014\n\004base\030\004 \002(\010\"H\n\nt"
    "aint_info\022\020\n\010no_taint\030\001 \001(\010\022\020\n\010taint_id\030"
    "\002 \001(\004\022\026\n\016taint_multiple\030\003 \001(\010\"f\n\tstd_fra"
    "me\022\017\n\007address\030\001 \002(\004\022\021\n\tthread_id\030\002 \002(\004\022\020"
    "\n\010rawbytes\030\003 \002(\014\022#\n\014operand_list\030\004 \002(\0132\r"
    ".operand_list\"j\n\rsyscall_frame\022\017\n\007addres"
    "s\030\001 \002(\004\022\021\n\tthread_id\030\002 \002(\004\022\016\n\006number\030\003 \002"
    "(\004\022%\n\rargument_list\030\004 \002(\0132\016.argument_lis"
    "t\"\035\n\rargument_list\022\014\n\004elem\030\001 \003(\022\"b\n\017exce"
    "ption_frame\022\030\n\020exception_number\030\001 \002(\004\022\021\n"
    "\tthread_id\030\002 \001(\004\022\021\n\tfrom_addr\030\003 \001(\004\022\017\n\007t"
    "o_addr\030\004 \001(\004\"@\n\021taint_intro_frame\022+\n\020tai"
    "nt_intro_list\030\001 \002(\0132\021.taint_intro_list\"."
    "\n\020taint_intro_list\022\032\n\004elem\030\001 \003(\0132\014.taint"
    "_intro\"a\n\013taint_intro\022\014\n\004addr\030\001 \002(\004\022\020\n\010t"
    "aint_id\030\002 \002(\004\022\r\n\005value\030\003 \001(\014\022\023\n\013source_n"
    "ame\030\004 \002(\t\022\016\n\006offset\030\005 \002(\004\"O\n\rmodload_fra"
    "me\022\023\n\013module_name\030\001 \002(\t\022\023\n\013low_address\030\002"
    " \002(\004\022\024\n\014high_address\030\003 \002(\004\"<\n\tkey_frame\022"
    "/\n\022tagged_value_lists\030\001 \002(\0132\023.tagged_val"
    "ue_lists\"6\n\022tagged_value_lists\022 \n\004elem\030\001"
    " \003(\0132\022.tagged_value_list\"a\n\021tagged_value"
    "_list\022+\n\020value_source_tag\030\001 \002(\0132\021.value_"
    "source_tag\022\037\n\nvalue_list\030\002 \002(\0132\013.value_l"
    "ist\";\n\020value_source_tag\022\024\n\014no_thread_id\030"
    "\001 \001(\010\022\021\n\tthread_id\030\002 \001(\004\"\'\n\nvalue_list\022\031"
    "\n\004elem\030\001 \003(\0132\013.value_info\"\207\001\n\nvalue_info"
    "\0225\n\025operand_info_specific\030\001 \002(\0132\026.operan"
    "d_info_specific\022\022\n\nbit_length\030\002 \002(\021\022\037\n\nt"
    "aint_info\030\003 \001(\0132\013.taint_info\022\r\n\005value\030\004 "
    "\002(\014", 1883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frame.piqi.proto", &protobuf_RegisterTypes);
  frame::default_instance_ = new frame();
  operand_list::default_instance_ = new operand_list();
  operand_info::default_instance_ = new operand_info();
  operand_info_specific::default_instance_ = new operand_info_specific();
  reg_operand::default_instance_ = new reg_operand();
  mem_operand::default_instance_ = new mem_operand();
  operand_usage::default_instance_ = new operand_usage();
  taint_info::default_instance_ = new taint_info();
  std_frame::default_instance_ = new std_frame();
  syscall_frame::default_instance_ = new syscall_frame();
  argument_list::default_instance_ = new argument_list();
  exception_frame::default_instance_ = new exception_frame();
  taint_intro_frame::default_instance_ = new taint_intro_frame();
  taint_intro_list::default_instance_ = new taint_intro_list();
  taint_intro::default_instance_ = new taint_intro();
  modload_frame::default_instance_ = new modload_frame();
  key_frame::default_instance_ = new key_frame();
  tagged_value_lists::default_instance_ = new tagged_value_lists();
  tagged_value_list::default_instance_ = new tagged_value_list();
  value_source_tag::default_instance_ = new value_source_tag();
  value_list::default_instance_ = new value_list();
  value_info::default_instance_ = new value_info();
  frame::default_instance_->InitAsDefaultInstance();
  operand_list::default_instance_->InitAsDefaultInstance();
  operand_info::default_instance_->InitAsDefaultInstance();
  operand_info_specific::default_instance_->InitAsDefaultInstance();
  reg_operand::default_instance_->InitAsDefaultInstance();
  mem_operand::default_instance_->InitAsDefaultInstance();
  operand_usage::default_instance_->InitAsDefaultInstance();
  taint_info::default_instance_->InitAsDefaultInstance();
  std_frame::default_instance_->InitAsDefaultInstance();
  syscall_frame::default_instance_->InitAsDefaultInstance();
  argument_list::default_instance_->InitAsDefaultInstance();
  exception_frame::default_instance_->InitAsDefaultInstance();
  taint_intro_frame::default_instance_->InitAsDefaultInstance();
  taint_intro_list::default_instance_->InitAsDefaultInstance();
  taint_intro::default_instance_->InitAsDefaultInstance();
  modload_frame::default_instance_->InitAsDefaultInstance();
  key_frame::default_instance_->InitAsDefaultInstance();
  tagged_value_lists::default_instance_->InitAsDefaultInstance();
  tagged_value_list::default_instance_->InitAsDefaultInstance();
  value_source_tag::default_instance_->InitAsDefaultInstance();
  value_list::default_instance_->InitAsDefaultInstance();
  value_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_frame_2epiqi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_frame_2epiqi_2eproto {
  StaticDescriptorInitializer_frame_2epiqi_2eproto() {
    protobuf_AddDesc_frame_2epiqi_2eproto();
  }
} static_descriptor_initializer_frame_2epiqi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int frame::kStdFrameFieldNumber;
const int frame::kSyscallFrameFieldNumber;
const int frame::kExceptionFrameFieldNumber;
const int frame::kTaintIntroFrameFieldNumber;
const int frame::kModloadFrameFieldNumber;
const int frame::kKeyFrameFieldNumber;
#endif  // !_MSC_VER

frame::frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void frame::InitAsDefaultInstance() {
  std_frame_ = const_cast< ::std_frame*>(&::std_frame::default_instance());
  syscall_frame_ = const_cast< ::syscall_frame*>(&::syscall_frame::default_instance());
  exception_frame_ = const_cast< ::exception_frame*>(&::exception_frame::default_instance());
  taint_intro_frame_ = const_cast< ::taint_intro_frame*>(&::taint_intro_frame::default_instance());
  modload_frame_ = const_cast< ::modload_frame*>(&::modload_frame::default_instance());
  key_frame_ = const_cast< ::key_frame*>(&::key_frame::default_instance());
}

frame::frame(const frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void frame::SharedCtor() {
  _cached_size_ = 0;
  std_frame_ = NULL;
  syscall_frame_ = NULL;
  exception_frame_ = NULL;
  taint_intro_frame_ = NULL;
  modload_frame_ = NULL;
  key_frame_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

frame::~frame() {
  SharedDtor();
}

void frame::SharedDtor() {
  if (this != default_instance_) {
    delete std_frame_;
    delete syscall_frame_;
    delete exception_frame_;
    delete taint_intro_frame_;
    delete modload_frame_;
    delete key_frame_;
  }
}

void frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return frame_descriptor_;
}

const frame& frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

frame* frame::default_instance_ = NULL;

frame* frame::New() const {
  return new frame;
}

void frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_std_frame()) {
      if (std_frame_ != NULL) std_frame_->::std_frame::Clear();
    }
    if (has_syscall_frame()) {
      if (syscall_frame_ != NULL) syscall_frame_->::syscall_frame::Clear();
    }
    if (has_exception_frame()) {
      if (exception_frame_ != NULL) exception_frame_->::exception_frame::Clear();
    }
    if (has_taint_intro_frame()) {
      if (taint_intro_frame_ != NULL) taint_intro_frame_->::taint_intro_frame::Clear();
    }
    if (has_modload_frame()) {
      if (modload_frame_ != NULL) modload_frame_->::modload_frame::Clear();
    }
    if (has_key_frame()) {
      if (key_frame_ != NULL) key_frame_->::key_frame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .std_frame std_frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_std_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscall_frame;
        break;
      }
      
      // optional .syscall_frame syscall_frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscall_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exception_frame;
        break;
      }
      
      // optional .exception_frame exception_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_taint_intro_frame;
        break;
      }
      
      // optional .taint_intro_frame taint_intro_frame = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taint_intro_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_intro_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_modload_frame;
        break;
      }
      
      // optional .modload_frame modload_frame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modload_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modload_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key_frame;
        break;
      }
      
      // optional .key_frame key_frame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .std_frame std_frame = 1;
  if (has_std_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->std_frame(), output);
  }
  
  // optional .syscall_frame syscall_frame = 2;
  if (has_syscall_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscall_frame(), output);
  }
  
  // optional .exception_frame exception_frame = 3;
  if (has_exception_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exception_frame(), output);
  }
  
  // optional .taint_intro_frame taint_intro_frame = 4;
  if (has_taint_intro_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->taint_intro_frame(), output);
  }
  
  // optional .modload_frame modload_frame = 5;
  if (has_modload_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->modload_frame(), output);
  }
  
  // optional .key_frame key_frame = 6;
  if (has_key_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->key_frame(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .std_frame std_frame = 1;
  if (has_std_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->std_frame(), target);
  }
  
  // optional .syscall_frame syscall_frame = 2;
  if (has_syscall_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscall_frame(), target);
  }
  
  // optional .exception_frame exception_frame = 3;
  if (has_exception_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exception_frame(), target);
  }
  
  // optional .taint_intro_frame taint_intro_frame = 4;
  if (has_taint_intro_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->taint_intro_frame(), target);
  }
  
  // optional .modload_frame modload_frame = 5;
  if (has_modload_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->modload_frame(), target);
  }
  
  // optional .key_frame key_frame = 6;
  if (has_key_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->key_frame(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .std_frame std_frame = 1;
    if (has_std_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->std_frame());
    }
    
    // optional .syscall_frame syscall_frame = 2;
    if (has_syscall_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscall_frame());
    }
    
    // optional .exception_frame exception_frame = 3;
    if (has_exception_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception_frame());
    }
    
    // optional .taint_intro_frame taint_intro_frame = 4;
    if (has_taint_intro_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_intro_frame());
    }
    
    // optional .modload_frame modload_frame = 5;
    if (has_modload_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modload_frame());
    }
    
    // optional .key_frame key_frame = 6;
    if (has_key_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_frame());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void frame::MergeFrom(const frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_std_frame()) {
      mutable_std_frame()->::std_frame::MergeFrom(from.std_frame());
    }
    if (from.has_syscall_frame()) {
      mutable_syscall_frame()->::syscall_frame::MergeFrom(from.syscall_frame());
    }
    if (from.has_exception_frame()) {
      mutable_exception_frame()->::exception_frame::MergeFrom(from.exception_frame());
    }
    if (from.has_taint_intro_frame()) {
      mutable_taint_intro_frame()->::taint_intro_frame::MergeFrom(from.taint_intro_frame());
    }
    if (from.has_modload_frame()) {
      mutable_modload_frame()->::modload_frame::MergeFrom(from.modload_frame());
    }
    if (from.has_key_frame()) {
      mutable_key_frame()->::key_frame::MergeFrom(from.key_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void frame::CopyFrom(const frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool frame::IsInitialized() const {
  
  if (has_std_frame()) {
    if (!this->std_frame().IsInitialized()) return false;
  }
  if (has_syscall_frame()) {
    if (!this->syscall_frame().IsInitialized()) return false;
  }
  if (has_exception_frame()) {
    if (!this->exception_frame().IsInitialized()) return false;
  }
  if (has_taint_intro_frame()) {
    if (!this->taint_intro_frame().IsInitialized()) return false;
  }
  if (has_modload_frame()) {
    if (!this->modload_frame().IsInitialized()) return false;
  }
  if (has_key_frame()) {
    if (!this->key_frame().IsInitialized()) return false;
  }
  return true;
}

void frame::Swap(frame* other) {
  if (other != this) {
    std::swap(std_frame_, other->std_frame_);
    std::swap(syscall_frame_, other->syscall_frame_);
    std::swap(exception_frame_, other->exception_frame_);
    std::swap(taint_intro_frame_, other->taint_intro_frame_);
    std::swap(modload_frame_, other->modload_frame_);
    std::swap(key_frame_, other->key_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = frame_descriptor_;
  metadata.reflection = frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_list::kElemFieldNumber;
#endif  // !_MSC_VER

operand_list::operand_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_list::InitAsDefaultInstance() {
}

operand_list::operand_list(const operand_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_list::~operand_list() {
  SharedDtor();
}

void operand_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operand_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_list_descriptor_;
}

const operand_list& operand_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

operand_list* operand_list::default_instance_ = NULL;

operand_list* operand_list::New() const {
  return new operand_list;
}

void operand_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operand_info elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .operand_info elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .operand_info elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_list::ByteSize() const {
  int total_size = 0;
  
  // repeated .operand_info elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_list::MergeFrom(const operand_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_list::CopyFrom(const operand_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_list::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void operand_list::Swap(operand_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_list_descriptor_;
  metadata.reflection = operand_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_info::kOperandInfoSpecificFieldNumber;
const int operand_info::kBitLengthFieldNumber;
const int operand_info::kOperandUsageFieldNumber;
const int operand_info::kTaintInfoFieldNumber;
const int operand_info::kValueFieldNumber;
#endif  // !_MSC_VER

operand_info::operand_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_info::InitAsDefaultInstance() {
  operand_info_specific_ = const_cast< ::operand_info_specific*>(&::operand_info_specific::default_instance());
  operand_usage_ = const_cast< ::operand_usage*>(&::operand_usage::default_instance());
  taint_info_ = const_cast< ::taint_info*>(&::taint_info::default_instance());
}

operand_info::operand_info(const operand_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_info::SharedCtor() {
  _cached_size_ = 0;
  operand_info_specific_ = NULL;
  bit_length_ = 0;
  operand_usage_ = NULL;
  taint_info_ = NULL;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_info::~operand_info() {
  SharedDtor();
}

void operand_info::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete operand_info_specific_;
    delete operand_usage_;
    delete taint_info_;
  }
}

void operand_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_info_descriptor_;
}

const operand_info& operand_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

operand_info* operand_info::default_instance_ = NULL;

operand_info* operand_info::New() const {
  return new operand_info;
}

void operand_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operand_info_specific()) {
      if (operand_info_specific_ != NULL) operand_info_specific_->::operand_info_specific::Clear();
    }
    bit_length_ = 0;
    if (has_operand_usage()) {
      if (operand_usage_ != NULL) operand_usage_->::operand_usage::Clear();
    }
    if (has_taint_info()) {
      if (taint_info_ != NULL) taint_info_->::taint_info::Clear();
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .operand_info_specific operand_info_specific = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_info_specific()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_length;
        break;
      }
      
      // required sint32 bit_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bit_length_)));
          set_has_bit_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operand_usage;
        break;
      }
      
      // required .operand_usage operand_usage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operand_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_usage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_taint_info;
        break;
      }
      
      // required .taint_info taint_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taint_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // required bytes value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .operand_info_specific operand_info_specific = 1;
  if (has_operand_info_specific()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operand_info_specific(), output);
  }
  
  // required sint32 bit_length = 2;
  if (has_bit_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bit_length(), output);
  }
  
  // required .operand_usage operand_usage = 3;
  if (has_operand_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operand_usage(), output);
  }
  
  // required .taint_info taint_info = 4;
  if (has_taint_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->taint_info(), output);
  }
  
  // required bytes value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .operand_info_specific operand_info_specific = 1;
  if (has_operand_info_specific()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operand_info_specific(), target);
  }
  
  // required sint32 bit_length = 2;
  if (has_bit_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bit_length(), target);
  }
  
  // required .operand_usage operand_usage = 3;
  if (has_operand_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->operand_usage(), target);
  }
  
  // required .taint_info taint_info = 4;
  if (has_taint_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->taint_info(), target);
  }
  
  // required bytes value = 5;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .operand_info_specific operand_info_specific = 1;
    if (has_operand_info_specific()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_info_specific());
    }
    
    // required sint32 bit_length = 2;
    if (has_bit_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bit_length());
    }
    
    // required .operand_usage operand_usage = 3;
    if (has_operand_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_usage());
    }
    
    // required .taint_info taint_info = 4;
    if (has_taint_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_info());
    }
    
    // required bytes value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_info::MergeFrom(const operand_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operand_info_specific()) {
      mutable_operand_info_specific()->::operand_info_specific::MergeFrom(from.operand_info_specific());
    }
    if (from.has_bit_length()) {
      set_bit_length(from.bit_length());
    }
    if (from.has_operand_usage()) {
      mutable_operand_usage()->::operand_usage::MergeFrom(from.operand_usage());
    }
    if (from.has_taint_info()) {
      mutable_taint_info()->::taint_info::MergeFrom(from.taint_info());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_info::CopyFrom(const operand_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_operand_info_specific()) {
    if (!this->operand_info_specific().IsInitialized()) return false;
  }
  if (has_operand_usage()) {
    if (!this->operand_usage().IsInitialized()) return false;
  }
  return true;
}

void operand_info::Swap(operand_info* other) {
  if (other != this) {
    std::swap(operand_info_specific_, other->operand_info_specific_);
    std::swap(bit_length_, other->bit_length_);
    std::swap(operand_usage_, other->operand_usage_);
    std::swap(taint_info_, other->taint_info_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_info_descriptor_;
  metadata.reflection = operand_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_info_specific::kMemOperandFieldNumber;
const int operand_info_specific::kRegOperandFieldNumber;
#endif  // !_MSC_VER

operand_info_specific::operand_info_specific()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_info_specific::InitAsDefaultInstance() {
  mem_operand_ = const_cast< ::mem_operand*>(&::mem_operand::default_instance());
  reg_operand_ = const_cast< ::reg_operand*>(&::reg_operand::default_instance());
}

operand_info_specific::operand_info_specific(const operand_info_specific& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_info_specific::SharedCtor() {
  _cached_size_ = 0;
  mem_operand_ = NULL;
  reg_operand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_info_specific::~operand_info_specific() {
  SharedDtor();
}

void operand_info_specific::SharedDtor() {
  if (this != default_instance_) {
    delete mem_operand_;
    delete reg_operand_;
  }
}

void operand_info_specific::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_info_specific::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_info_specific_descriptor_;
}

const operand_info_specific& operand_info_specific::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

operand_info_specific* operand_info_specific::default_instance_ = NULL;

operand_info_specific* operand_info_specific::New() const {
  return new operand_info_specific;
}

void operand_info_specific::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mem_operand()) {
      if (mem_operand_ != NULL) mem_operand_->::mem_operand::Clear();
    }
    if (has_reg_operand()) {
      if (reg_operand_ != NULL) reg_operand_->::reg_operand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_info_specific::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mem_operand mem_operand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_operand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reg_operand;
        break;
      }
      
      // optional .reg_operand reg_operand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_operand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_operand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_info_specific::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mem_operand mem_operand = 1;
  if (has_mem_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_operand(), output);
  }
  
  // optional .reg_operand reg_operand = 2;
  if (has_reg_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reg_operand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_info_specific::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mem_operand mem_operand = 1;
  if (has_mem_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_operand(), target);
  }
  
  // optional .reg_operand reg_operand = 2;
  if (has_reg_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reg_operand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_info_specific::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mem_operand mem_operand = 1;
    if (has_mem_operand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_operand());
    }
    
    // optional .reg_operand reg_operand = 2;
    if (has_reg_operand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_operand());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_info_specific::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_info_specific* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_info_specific*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_info_specific::MergeFrom(const operand_info_specific& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mem_operand()) {
      mutable_mem_operand()->::mem_operand::MergeFrom(from.mem_operand());
    }
    if (from.has_reg_operand()) {
      mutable_reg_operand()->::reg_operand::MergeFrom(from.reg_operand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_info_specific::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_info_specific::CopyFrom(const operand_info_specific& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_info_specific::IsInitialized() const {
  
  if (has_mem_operand()) {
    if (!this->mem_operand().IsInitialized()) return false;
  }
  if (has_reg_operand()) {
    if (!this->reg_operand().IsInitialized()) return false;
  }
  return true;
}

void operand_info_specific::Swap(operand_info_specific* other) {
  if (other != this) {
    std::swap(mem_operand_, other->mem_operand_);
    std::swap(reg_operand_, other->reg_operand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_info_specific::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_info_specific_descriptor_;
  metadata.reflection = operand_info_specific_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reg_operand::kNameFieldNumber;
#endif  // !_MSC_VER

reg_operand::reg_operand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reg_operand::InitAsDefaultInstance() {
}

reg_operand::reg_operand(const reg_operand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reg_operand::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reg_operand::~reg_operand() {
  SharedDtor();
}

void reg_operand::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void reg_operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reg_operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reg_operand_descriptor_;
}

const reg_operand& reg_operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

reg_operand* reg_operand::default_instance_ = NULL;

reg_operand* reg_operand::New() const {
  return new reg_operand;
}

void reg_operand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reg_operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reg_operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reg_operand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reg_operand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reg_operand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reg_operand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reg_operand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reg_operand::MergeFrom(const reg_operand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reg_operand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reg_operand::CopyFrom(const reg_operand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reg_operand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void reg_operand::Swap(reg_operand* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reg_operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reg_operand_descriptor_;
  metadata.reflection = reg_operand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mem_operand::kAddressFieldNumber;
#endif  // !_MSC_VER

mem_operand::mem_operand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mem_operand::InitAsDefaultInstance() {
}

mem_operand::mem_operand(const mem_operand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mem_operand::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mem_operand::~mem_operand() {
  SharedDtor();
}

void mem_operand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mem_operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mem_operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mem_operand_descriptor_;
}

const mem_operand& mem_operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

mem_operand* mem_operand::default_instance_ = NULL;

mem_operand* mem_operand::New() const {
  return new mem_operand;
}

void mem_operand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mem_operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mem_operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mem_operand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mem_operand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mem_operand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mem_operand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mem_operand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mem_operand::MergeFrom(const mem_operand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mem_operand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mem_operand::CopyFrom(const mem_operand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mem_operand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void mem_operand::Swap(mem_operand* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mem_operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mem_operand_descriptor_;
  metadata.reflection = mem_operand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operand_usage::kReadFieldNumber;
const int operand_usage::kWrittenFieldNumber;
const int operand_usage::kIndexFieldNumber;
const int operand_usage::kBaseFieldNumber;
#endif  // !_MSC_VER

operand_usage::operand_usage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operand_usage::InitAsDefaultInstance() {
}

operand_usage::operand_usage(const operand_usage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operand_usage::SharedCtor() {
  _cached_size_ = 0;
  read_ = false;
  written_ = false;
  index_ = false;
  base_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operand_usage::~operand_usage() {
  SharedDtor();
}

void operand_usage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operand_usage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operand_usage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operand_usage_descriptor_;
}

const operand_usage& operand_usage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

operand_usage* operand_usage::default_instance_ = NULL;

operand_usage* operand_usage::New() const {
  return new operand_usage;
}

void operand_usage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    read_ = false;
    written_ = false;
    index_ = false;
    base_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operand_usage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool read = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_)));
          set_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_written;
        break;
      }
      
      // required bool written = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &written_)));
          set_has_written();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required bool index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base;
        break;
      }
      
      // required bool base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operand_usage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool read = 1;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->read(), output);
  }
  
  // required bool written = 2;
  if (has_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->written(), output);
  }
  
  // required bool index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->index(), output);
  }
  
  // required bool base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->base(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operand_usage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool read = 1;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->read(), target);
  }
  
  // required bool written = 2;
  if (has_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->written(), target);
  }
  
  // required bool index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->index(), target);
  }
  
  // required bool base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->base(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operand_usage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool read = 1;
    if (has_read()) {
      total_size += 1 + 1;
    }
    
    // required bool written = 2;
    if (has_written()) {
      total_size += 1 + 1;
    }
    
    // required bool index = 3;
    if (has_index()) {
      total_size += 1 + 1;
    }
    
    // required bool base = 4;
    if (has_base()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operand_usage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operand_usage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operand_usage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operand_usage::MergeFrom(const operand_usage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read()) {
      set_read(from.read());
    }
    if (from.has_written()) {
      set_written(from.written());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operand_usage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operand_usage::CopyFrom(const operand_usage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operand_usage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void operand_usage::Swap(operand_usage* other) {
  if (other != this) {
    std::swap(read_, other->read_);
    std::swap(written_, other->written_);
    std::swap(index_, other->index_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operand_usage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operand_usage_descriptor_;
  metadata.reflection = operand_usage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_info::kNoTaintFieldNumber;
const int taint_info::kTaintIdFieldNumber;
const int taint_info::kTaintMultipleFieldNumber;
#endif  // !_MSC_VER

taint_info::taint_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_info::InitAsDefaultInstance() {
}

taint_info::taint_info(const taint_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_info::SharedCtor() {
  _cached_size_ = 0;
  no_taint_ = false;
  taint_id_ = GOOGLE_ULONGLONG(0);
  taint_multiple_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_info::~taint_info() {
  SharedDtor();
}

void taint_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taint_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_info_descriptor_;
}

const taint_info& taint_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

taint_info* taint_info::default_instance_ = NULL;

taint_info* taint_info::New() const {
  return new taint_info;
}

void taint_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    no_taint_ = false;
    taint_id_ = GOOGLE_ULONGLONG(0);
    taint_multiple_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool no_taint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_taint_)));
          set_has_no_taint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taint_id;
        break;
      }
      
      // optional uint64 taint_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taint_id_)));
          set_has_taint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taint_multiple;
        break;
      }
      
      // optional bool taint_multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taint_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &taint_multiple_)));
          set_has_taint_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool no_taint = 1;
  if (has_no_taint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->no_taint(), output);
  }
  
  // optional uint64 taint_id = 2;
  if (has_taint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->taint_id(), output);
  }
  
  // optional bool taint_multiple = 3;
  if (has_taint_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->taint_multiple(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool no_taint = 1;
  if (has_no_taint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->no_taint(), target);
  }
  
  // optional uint64 taint_id = 2;
  if (has_taint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->taint_id(), target);
  }
  
  // optional bool taint_multiple = 3;
  if (has_taint_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->taint_multiple(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool no_taint = 1;
    if (has_no_taint()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 taint_id = 2;
    if (has_taint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taint_id());
    }
    
    // optional bool taint_multiple = 3;
    if (has_taint_multiple()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_info::MergeFrom(const taint_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_no_taint()) {
      set_no_taint(from.no_taint());
    }
    if (from.has_taint_id()) {
      set_taint_id(from.taint_id());
    }
    if (from.has_taint_multiple()) {
      set_taint_multiple(from.taint_multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_info::CopyFrom(const taint_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_info::IsInitialized() const {
  
  return true;
}

void taint_info::Swap(taint_info* other) {
  if (other != this) {
    std::swap(no_taint_, other->no_taint_);
    std::swap(taint_id_, other->taint_id_);
    std::swap(taint_multiple_, other->taint_multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_info_descriptor_;
  metadata.reflection = taint_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int std_frame::kAddressFieldNumber;
const int std_frame::kThreadIdFieldNumber;
const int std_frame::kRawbytesFieldNumber;
const int std_frame::kOperandListFieldNumber;
#endif  // !_MSC_VER

std_frame::std_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void std_frame::InitAsDefaultInstance() {
  operand_list_ = const_cast< ::operand_list*>(&::operand_list::default_instance());
}

std_frame::std_frame(const std_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void std_frame::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  rawbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operand_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

std_frame::~std_frame() {
  SharedDtor();
}

void std_frame::SharedDtor() {
  if (rawbytes_ != &::google::protobuf::internal::kEmptyString) {
    delete rawbytes_;
  }
  if (this != default_instance_) {
    delete operand_list_;
  }
}

void std_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* std_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return std_frame_descriptor_;
}

const std_frame& std_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

std_frame* std_frame::default_instance_ = NULL;

std_frame* std_frame::New() const {
  return new std_frame;
}

void std_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    if (has_rawbytes()) {
      if (rawbytes_ != &::google::protobuf::internal::kEmptyString) {
        rawbytes_->clear();
      }
    }
    if (has_operand_list()) {
      if (operand_list_ != NULL) operand_list_->::operand_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool std_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // required uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rawbytes;
        break;
      }
      
      // required bytes rawbytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rawbytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawbytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_operand_list;
        break;
      }
      
      // required .operand_list operand_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operand_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void std_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  // required bytes rawbytes = 3;
  if (has_rawbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rawbytes(), output);
  }
  
  // required .operand_list operand_list = 4;
  if (has_operand_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->operand_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* std_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  // required bytes rawbytes = 3;
  if (has_rawbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rawbytes(), target);
  }
  
  // required .operand_list operand_list = 4;
  if (has_operand_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->operand_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int std_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
    // required uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
    // required bytes rawbytes = 3;
    if (has_rawbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rawbytes());
    }
    
    // required .operand_list operand_list = 4;
    if (has_operand_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void std_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const std_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const std_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void std_frame::MergeFrom(const std_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_rawbytes()) {
      set_rawbytes(from.rawbytes());
    }
    if (from.has_operand_list()) {
      mutable_operand_list()->::operand_list::MergeFrom(from.operand_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void std_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void std_frame::CopyFrom(const std_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool std_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_operand_list()) {
    if (!this->operand_list().IsInitialized()) return false;
  }
  return true;
}

void std_frame::Swap(std_frame* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(rawbytes_, other->rawbytes_);
    std::swap(operand_list_, other->operand_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata std_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = std_frame_descriptor_;
  metadata.reflection = std_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syscall_frame::kAddressFieldNumber;
const int syscall_frame::kThreadIdFieldNumber;
const int syscall_frame::kNumberFieldNumber;
const int syscall_frame::kArgumentListFieldNumber;
#endif  // !_MSC_VER

syscall_frame::syscall_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syscall_frame::InitAsDefaultInstance() {
  argument_list_ = const_cast< ::argument_list*>(&::argument_list::default_instance());
}

syscall_frame::syscall_frame(const syscall_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syscall_frame::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  number_ = GOOGLE_ULONGLONG(0);
  argument_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syscall_frame::~syscall_frame() {
  SharedDtor();
}

void syscall_frame::SharedDtor() {
  if (this != default_instance_) {
    delete argument_list_;
  }
}

void syscall_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syscall_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syscall_frame_descriptor_;
}

const syscall_frame& syscall_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

syscall_frame* syscall_frame::default_instance_ = NULL;

syscall_frame* syscall_frame::New() const {
  return new syscall_frame;
}

void syscall_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    number_ = GOOGLE_ULONGLONG(0);
    if (has_argument_list()) {
      if (argument_list_ != NULL) argument_list_->::argument_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syscall_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // required uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // required uint64 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_argument_list;
        break;
      }
      
      // required .argument_list argument_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argument_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syscall_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  // required uint64 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->number(), output);
  }
  
  // required .argument_list argument_list = 4;
  if (has_argument_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->argument_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syscall_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }
  
  // required uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  // required uint64 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->number(), target);
  }
  
  // required .argument_list argument_list = 4;
  if (has_argument_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->argument_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syscall_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
    // required uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
    // required uint64 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->number());
    }
    
    // required .argument_list argument_list = 4;
    if (has_argument_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argument_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syscall_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syscall_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syscall_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syscall_frame::MergeFrom(const syscall_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_argument_list()) {
      mutable_argument_list()->::argument_list::MergeFrom(from.argument_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syscall_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_frame::CopyFrom(const syscall_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void syscall_frame::Swap(syscall_frame* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(number_, other->number_);
    std::swap(argument_list_, other->argument_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syscall_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syscall_frame_descriptor_;
  metadata.reflection = syscall_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int argument_list::kElemFieldNumber;
#endif  // !_MSC_VER

argument_list::argument_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void argument_list::InitAsDefaultInstance() {
}

argument_list::argument_list(const argument_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void argument_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

argument_list::~argument_list() {
  SharedDtor();
}

void argument_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void argument_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* argument_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return argument_list_descriptor_;
}

const argument_list& argument_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

argument_list* argument_list::default_instance_ = NULL;

argument_list* argument_list::New() const {
  return new argument_list;
}

void argument_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool argument_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_elem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_elem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void argument_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* argument_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int argument_list::ByteSize() const {
  int total_size = 0;
  
  // repeated sint64 elem = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->elem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->elem(i));
    }
    total_size += 1 * this->elem_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void argument_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const argument_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const argument_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void argument_list::MergeFrom(const argument_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void argument_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void argument_list::CopyFrom(const argument_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool argument_list::IsInitialized() const {
  
  return true;
}

void argument_list::Swap(argument_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata argument_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = argument_list_descriptor_;
  metadata.reflection = argument_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exception_frame::kExceptionNumberFieldNumber;
const int exception_frame::kThreadIdFieldNumber;
const int exception_frame::kFromAddrFieldNumber;
const int exception_frame::kToAddrFieldNumber;
#endif  // !_MSC_VER

exception_frame::exception_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exception_frame::InitAsDefaultInstance() {
}

exception_frame::exception_frame(const exception_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exception_frame::SharedCtor() {
  _cached_size_ = 0;
  exception_number_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  from_addr_ = GOOGLE_ULONGLONG(0);
  to_addr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exception_frame::~exception_frame() {
  SharedDtor();
}

void exception_frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exception_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exception_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exception_frame_descriptor_;
}

const exception_frame& exception_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

exception_frame* exception_frame::default_instance_ = NULL;

exception_frame* exception_frame::New() const {
  return new exception_frame;
}

void exception_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exception_number_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    from_addr_ = GOOGLE_ULONGLONG(0);
    to_addr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exception_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 exception_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exception_number_)));
          set_has_exception_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // optional uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_addr;
        break;
      }
      
      // optional uint64 from_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_addr_)));
          set_has_from_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_addr;
        break;
      }
      
      // optional uint64 to_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_addr_)));
          set_has_to_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exception_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 exception_number = 1;
  if (has_exception_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->exception_number(), output);
  }
  
  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  // optional uint64 from_addr = 3;
  if (has_from_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_addr(), output);
  }
  
  // optional uint64 to_addr = 4;
  if (has_to_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exception_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 exception_number = 1;
  if (has_exception_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->exception_number(), target);
  }
  
  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  // optional uint64 from_addr = 3;
  if (has_from_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_addr(), target);
  }
  
  // optional uint64 to_addr = 4;
  if (has_to_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exception_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 exception_number = 1;
    if (has_exception_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exception_number());
    }
    
    // optional uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
    // optional uint64 from_addr = 3;
    if (has_from_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_addr());
    }
    
    // optional uint64 to_addr = 4;
    if (has_to_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exception_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exception_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exception_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exception_frame::MergeFrom(const exception_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exception_number()) {
      set_exception_number(from.exception_number());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_from_addr()) {
      set_from_addr(from.from_addr());
    }
    if (from.has_to_addr()) {
      set_to_addr(from.to_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exception_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exception_frame::CopyFrom(const exception_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exception_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void exception_frame::Swap(exception_frame* other) {
  if (other != this) {
    std::swap(exception_number_, other->exception_number_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(from_addr_, other->from_addr_);
    std::swap(to_addr_, other->to_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exception_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exception_frame_descriptor_;
  metadata.reflection = exception_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_intro_frame::kTaintIntroListFieldNumber;
#endif  // !_MSC_VER

taint_intro_frame::taint_intro_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_intro_frame::InitAsDefaultInstance() {
  taint_intro_list_ = const_cast< ::taint_intro_list*>(&::taint_intro_list::default_instance());
}

taint_intro_frame::taint_intro_frame(const taint_intro_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_intro_frame::SharedCtor() {
  _cached_size_ = 0;
  taint_intro_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_intro_frame::~taint_intro_frame() {
  SharedDtor();
}

void taint_intro_frame::SharedDtor() {
  if (this != default_instance_) {
    delete taint_intro_list_;
  }
}

void taint_intro_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_intro_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_intro_frame_descriptor_;
}

const taint_intro_frame& taint_intro_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

taint_intro_frame* taint_intro_frame::default_instance_ = NULL;

taint_intro_frame* taint_intro_frame::New() const {
  return new taint_intro_frame;
}

void taint_intro_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taint_intro_list()) {
      if (taint_intro_list_ != NULL) taint_intro_list_->::taint_intro_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_intro_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .taint_intro_list taint_intro_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_intro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_intro_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .taint_intro_list taint_intro_list = 1;
  if (has_taint_intro_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taint_intro_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_intro_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .taint_intro_list taint_intro_list = 1;
  if (has_taint_intro_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taint_intro_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_intro_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .taint_intro_list taint_intro_list = 1;
    if (has_taint_intro_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_intro_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_intro_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_intro_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_intro_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_intro_frame::MergeFrom(const taint_intro_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taint_intro_list()) {
      mutable_taint_intro_list()->::taint_intro_list::MergeFrom(from.taint_intro_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_intro_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_intro_frame::CopyFrom(const taint_intro_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_intro_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_taint_intro_list()) {
    if (!this->taint_intro_list().IsInitialized()) return false;
  }
  return true;
}

void taint_intro_frame::Swap(taint_intro_frame* other) {
  if (other != this) {
    std::swap(taint_intro_list_, other->taint_intro_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_intro_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_intro_frame_descriptor_;
  metadata.reflection = taint_intro_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_intro_list::kElemFieldNumber;
#endif  // !_MSC_VER

taint_intro_list::taint_intro_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_intro_list::InitAsDefaultInstance() {
}

taint_intro_list::taint_intro_list(const taint_intro_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_intro_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_intro_list::~taint_intro_list() {
  SharedDtor();
}

void taint_intro_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taint_intro_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_intro_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_intro_list_descriptor_;
}

const taint_intro_list& taint_intro_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

taint_intro_list* taint_intro_list::default_instance_ = NULL;

taint_intro_list* taint_intro_list::New() const {
  return new taint_intro_list;
}

void taint_intro_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_intro_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .taint_intro elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_intro_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .taint_intro elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_intro_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .taint_intro elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_intro_list::ByteSize() const {
  int total_size = 0;
  
  // repeated .taint_intro elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_intro_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_intro_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_intro_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_intro_list::MergeFrom(const taint_intro_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_intro_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_intro_list::CopyFrom(const taint_intro_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_intro_list::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void taint_intro_list::Swap(taint_intro_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_intro_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_intro_list_descriptor_;
  metadata.reflection = taint_intro_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taint_intro::kAddrFieldNumber;
const int taint_intro::kTaintIdFieldNumber;
const int taint_intro::kValueFieldNumber;
const int taint_intro::kSourceNameFieldNumber;
const int taint_intro::kOffsetFieldNumber;
#endif  // !_MSC_VER

taint_intro::taint_intro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taint_intro::InitAsDefaultInstance() {
}

taint_intro::taint_intro(const taint_intro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taint_intro::SharedCtor() {
  _cached_size_ = 0;
  addr_ = GOOGLE_ULONGLONG(0);
  taint_id_ = GOOGLE_ULONGLONG(0);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taint_intro::~taint_intro() {
  SharedDtor();
}

void taint_intro::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    delete source_name_;
  }
  if (this != default_instance_) {
  }
}

void taint_intro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taint_intro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taint_intro_descriptor_;
}

const taint_intro& taint_intro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

taint_intro* taint_intro::default_instance_ = NULL;

taint_intro* taint_intro::New() const {
  return new taint_intro;
}

void taint_intro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = GOOGLE_ULONGLONG(0);
    taint_id_ = GOOGLE_ULONGLONG(0);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_source_name()) {
      if (source_name_ != &::google::protobuf::internal::kEmptyString) {
        source_name_->clear();
      }
    }
    offset_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taint_intro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taint_id;
        break;
      }
      
      // required uint64 taint_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taint_id_)));
          set_has_taint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source_name;
        break;
      }
      
      // required string source_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taint_intro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }
  
  // required uint64 taint_id = 2;
  if (has_taint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->taint_id(), output);
  }
  
  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }
  
  // required string source_name = 4;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->source_name(), output);
  }
  
  // required uint64 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taint_intro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }
  
  // required uint64 taint_id = 2;
  if (has_taint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->taint_id(), target);
  }
  
  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }
  
  // required string source_name = 4;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source_name(), target);
  }
  
  // required uint64 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taint_intro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }
    
    // required uint64 taint_id = 2;
    if (has_taint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taint_id());
    }
    
    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
    // required string source_name = 4;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }
    
    // required uint64 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taint_intro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taint_intro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taint_intro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taint_intro::MergeFrom(const taint_intro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_taint_id()) {
      set_taint_id(from.taint_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_source_name()) {
      set_source_name(from.source_name());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taint_intro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taint_intro::CopyFrom(const taint_intro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taint_intro::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void taint_intro::Swap(taint_intro* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(taint_id_, other->taint_id_);
    std::swap(value_, other->value_);
    std::swap(source_name_, other->source_name_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taint_intro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taint_intro_descriptor_;
  metadata.reflection = taint_intro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int modload_frame::kModuleNameFieldNumber;
const int modload_frame::kLowAddressFieldNumber;
const int modload_frame::kHighAddressFieldNumber;
#endif  // !_MSC_VER

modload_frame::modload_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void modload_frame::InitAsDefaultInstance() {
}

modload_frame::modload_frame(const modload_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void modload_frame::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  low_address_ = GOOGLE_ULONGLONG(0);
  high_address_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modload_frame::~modload_frame() {
  SharedDtor();
}

void modload_frame::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (this != default_instance_) {
  }
}

void modload_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modload_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modload_frame_descriptor_;
}

const modload_frame& modload_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

modload_frame* modload_frame::default_instance_ = NULL;

modload_frame* modload_frame::New() const {
  return new modload_frame;
}

void modload_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    low_address_ = GOOGLE_ULONGLONG(0);
    high_address_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modload_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_low_address;
        break;
      }
      
      // required uint64 low_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &low_address_)));
          set_has_low_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_high_address;
        break;
      }
      
      // required uint64 high_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &high_address_)));
          set_has_high_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void modload_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }
  
  // required uint64 low_address = 2;
  if (has_low_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->low_address(), output);
  }
  
  // required uint64 high_address = 3;
  if (has_high_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->high_address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* modload_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }
  
  // required uint64 low_address = 2;
  if (has_low_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->low_address(), target);
  }
  
  // required uint64 high_address = 3;
  if (has_high_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->high_address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int modload_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }
    
    // required uint64 low_address = 2;
    if (has_low_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->low_address());
    }
    
    // required uint64 high_address = 3;
    if (has_high_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->high_address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modload_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modload_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modload_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modload_frame::MergeFrom(const modload_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_low_address()) {
      set_low_address(from.low_address());
    }
    if (from.has_high_address()) {
      set_high_address(from.high_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modload_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modload_frame::CopyFrom(const modload_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modload_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void modload_frame::Swap(modload_frame* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(low_address_, other->low_address_);
    std::swap(high_address_, other->high_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modload_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modload_frame_descriptor_;
  metadata.reflection = modload_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int key_frame::kTaggedValueListsFieldNumber;
#endif  // !_MSC_VER

key_frame::key_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void key_frame::InitAsDefaultInstance() {
  tagged_value_lists_ = const_cast< ::tagged_value_lists*>(&::tagged_value_lists::default_instance());
}

key_frame::key_frame(const key_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void key_frame::SharedCtor() {
  _cached_size_ = 0;
  tagged_value_lists_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

key_frame::~key_frame() {
  SharedDtor();
}

void key_frame::SharedDtor() {
  if (this != default_instance_) {
    delete tagged_value_lists_;
  }
}

void key_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* key_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return key_frame_descriptor_;
}

const key_frame& key_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

key_frame* key_frame::default_instance_ = NULL;

key_frame* key_frame::New() const {
  return new key_frame;
}

void key_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tagged_value_lists()) {
      if (tagged_value_lists_ != NULL) tagged_value_lists_->::tagged_value_lists::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool key_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tagged_value_lists tagged_value_lists = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tagged_value_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void key_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tagged_value_lists tagged_value_lists = 1;
  if (has_tagged_value_lists()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tagged_value_lists(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* key_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tagged_value_lists tagged_value_lists = 1;
  if (has_tagged_value_lists()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tagged_value_lists(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int key_frame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tagged_value_lists tagged_value_lists = 1;
    if (has_tagged_value_lists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tagged_value_lists());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void key_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const key_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const key_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void key_frame::MergeFrom(const key_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tagged_value_lists()) {
      mutable_tagged_value_lists()->::tagged_value_lists::MergeFrom(from.tagged_value_lists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void key_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key_frame::CopyFrom(const key_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_tagged_value_lists()) {
    if (!this->tagged_value_lists().IsInitialized()) return false;
  }
  return true;
}

void key_frame::Swap(key_frame* other) {
  if (other != this) {
    std::swap(tagged_value_lists_, other->tagged_value_lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata key_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = key_frame_descriptor_;
  metadata.reflection = key_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagged_value_lists::kElemFieldNumber;
#endif  // !_MSC_VER

tagged_value_lists::tagged_value_lists()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagged_value_lists::InitAsDefaultInstance() {
}

tagged_value_lists::tagged_value_lists(const tagged_value_lists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagged_value_lists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagged_value_lists::~tagged_value_lists() {
  SharedDtor();
}

void tagged_value_lists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagged_value_lists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagged_value_lists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagged_value_lists_descriptor_;
}

const tagged_value_lists& tagged_value_lists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

tagged_value_lists* tagged_value_lists::default_instance_ = NULL;

tagged_value_lists* tagged_value_lists::New() const {
  return new tagged_value_lists;
}

void tagged_value_lists::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagged_value_lists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tagged_value_list elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagged_value_lists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tagged_value_list elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagged_value_lists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tagged_value_list elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagged_value_lists::ByteSize() const {
  int total_size = 0;
  
  // repeated .tagged_value_list elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagged_value_lists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagged_value_lists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagged_value_lists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagged_value_lists::MergeFrom(const tagged_value_lists& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagged_value_lists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagged_value_lists::CopyFrom(const tagged_value_lists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagged_value_lists::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void tagged_value_lists::Swap(tagged_value_lists* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagged_value_lists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagged_value_lists_descriptor_;
  metadata.reflection = tagged_value_lists_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagged_value_list::kValueSourceTagFieldNumber;
const int tagged_value_list::kValueListFieldNumber;
#endif  // !_MSC_VER

tagged_value_list::tagged_value_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagged_value_list::InitAsDefaultInstance() {
  value_source_tag_ = const_cast< ::value_source_tag*>(&::value_source_tag::default_instance());
  value_list_ = const_cast< ::value_list*>(&::value_list::default_instance());
}

tagged_value_list::tagged_value_list(const tagged_value_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagged_value_list::SharedCtor() {
  _cached_size_ = 0;
  value_source_tag_ = NULL;
  value_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagged_value_list::~tagged_value_list() {
  SharedDtor();
}

void tagged_value_list::SharedDtor() {
  if (this != default_instance_) {
    delete value_source_tag_;
    delete value_list_;
  }
}

void tagged_value_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagged_value_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagged_value_list_descriptor_;
}

const tagged_value_list& tagged_value_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

tagged_value_list* tagged_value_list::default_instance_ = NULL;

tagged_value_list* tagged_value_list::New() const {
  return new tagged_value_list;
}

void tagged_value_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value_source_tag()) {
      if (value_source_tag_ != NULL) value_source_tag_->::value_source_tag::Clear();
    }
    if (has_value_list()) {
      if (value_list_ != NULL) value_list_->::value_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagged_value_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .value_source_tag value_source_tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_source_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value_list;
        break;
      }
      
      // required .value_list value_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagged_value_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .value_source_tag value_source_tag = 1;
  if (has_value_source_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value_source_tag(), output);
  }
  
  // required .value_list value_list = 2;
  if (has_value_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagged_value_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .value_source_tag value_source_tag = 1;
  if (has_value_source_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value_source_tag(), target);
  }
  
  // required .value_list value_list = 2;
  if (has_value_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagged_value_list::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .value_source_tag value_source_tag = 1;
    if (has_value_source_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_source_tag());
    }
    
    // required .value_list value_list = 2;
    if (has_value_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagged_value_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagged_value_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagged_value_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagged_value_list::MergeFrom(const tagged_value_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_source_tag()) {
      mutable_value_source_tag()->::value_source_tag::MergeFrom(from.value_source_tag());
    }
    if (from.has_value_list()) {
      mutable_value_list()->::value_list::MergeFrom(from.value_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagged_value_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagged_value_list::CopyFrom(const tagged_value_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagged_value_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_value_list()) {
    if (!this->value_list().IsInitialized()) return false;
  }
  return true;
}

void tagged_value_list::Swap(tagged_value_list* other) {
  if (other != this) {
    std::swap(value_source_tag_, other->value_source_tag_);
    std::swap(value_list_, other->value_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagged_value_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagged_value_list_descriptor_;
  metadata.reflection = tagged_value_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int value_source_tag::kNoThreadIdFieldNumber;
const int value_source_tag::kThreadIdFieldNumber;
#endif  // !_MSC_VER

value_source_tag::value_source_tag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void value_source_tag::InitAsDefaultInstance() {
}

value_source_tag::value_source_tag(const value_source_tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void value_source_tag::SharedCtor() {
  _cached_size_ = 0;
  no_thread_id_ = false;
  thread_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

value_source_tag::~value_source_tag() {
  SharedDtor();
}

void value_source_tag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void value_source_tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* value_source_tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return value_source_tag_descriptor_;
}

const value_source_tag& value_source_tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

value_source_tag* value_source_tag::default_instance_ = NULL;

value_source_tag* value_source_tag::New() const {
  return new value_source_tag;
}

void value_source_tag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    no_thread_id_ = false;
    thread_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool value_source_tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool no_thread_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_thread_id_)));
          set_has_no_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }
      
      // optional uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void value_source_tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool no_thread_id = 1;
  if (has_no_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->no_thread_id(), output);
  }
  
  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* value_source_tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool no_thread_id = 1;
  if (has_no_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->no_thread_id(), target);
  }
  
  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int value_source_tag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool no_thread_id = 1;
    if (has_no_thread_id()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void value_source_tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const value_source_tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const value_source_tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void value_source_tag::MergeFrom(const value_source_tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_no_thread_id()) {
      set_no_thread_id(from.no_thread_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void value_source_tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void value_source_tag::CopyFrom(const value_source_tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool value_source_tag::IsInitialized() const {
  
  return true;
}

void value_source_tag::Swap(value_source_tag* other) {
  if (other != this) {
    std::swap(no_thread_id_, other->no_thread_id_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata value_source_tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = value_source_tag_descriptor_;
  metadata.reflection = value_source_tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int value_list::kElemFieldNumber;
#endif  // !_MSC_VER

value_list::value_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void value_list::InitAsDefaultInstance() {
}

value_list::value_list(const value_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void value_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

value_list::~value_list() {
  SharedDtor();
}

void value_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void value_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* value_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return value_list_descriptor_;
}

const value_list& value_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

value_list* value_list::default_instance_ = NULL;

value_list* value_list::New() const {
  return new value_list;
}

void value_list::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool value_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .value_info elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void value_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .value_info elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* value_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .value_info elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int value_list::ByteSize() const {
  int total_size = 0;
  
  // repeated .value_info elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void value_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const value_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const value_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void value_list::MergeFrom(const value_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void value_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void value_list::CopyFrom(const value_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool value_list::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void value_list::Swap(value_list* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata value_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = value_list_descriptor_;
  metadata.reflection = value_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int value_info::kOperandInfoSpecificFieldNumber;
const int value_info::kBitLengthFieldNumber;
const int value_info::kTaintInfoFieldNumber;
const int value_info::kValueFieldNumber;
#endif  // !_MSC_VER

value_info::value_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void value_info::InitAsDefaultInstance() {
  operand_info_specific_ = const_cast< ::operand_info_specific*>(&::operand_info_specific::default_instance());
  taint_info_ = const_cast< ::taint_info*>(&::taint_info::default_instance());
}

value_info::value_info(const value_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void value_info::SharedCtor() {
  _cached_size_ = 0;
  operand_info_specific_ = NULL;
  bit_length_ = 0;
  taint_info_ = NULL;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

value_info::~value_info() {
  SharedDtor();
}

void value_info::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete operand_info_specific_;
    delete taint_info_;
  }
}

void value_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* value_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return value_info_descriptor_;
}

const value_info& value_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2epiqi_2eproto();  return *default_instance_;
}

value_info* value_info::default_instance_ = NULL;

value_info* value_info::New() const {
  return new value_info;
}

void value_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operand_info_specific()) {
      if (operand_info_specific_ != NULL) operand_info_specific_->::operand_info_specific::Clear();
    }
    bit_length_ = 0;
    if (has_taint_info()) {
      if (taint_info_ != NULL) taint_info_->::taint_info::Clear();
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool value_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .operand_info_specific operand_info_specific = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand_info_specific()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_length;
        break;
      }
      
      // required sint32 bit_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bit_length_)));
          set_has_bit_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_taint_info;
        break;
      }
      
      // optional .taint_info taint_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taint_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void value_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .operand_info_specific operand_info_specific = 1;
  if (has_operand_info_specific()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operand_info_specific(), output);
  }
  
  // required sint32 bit_length = 2;
  if (has_bit_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bit_length(), output);
  }
  
  // optional .taint_info taint_info = 3;
  if (has_taint_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->taint_info(), output);
  }
  
  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* value_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .operand_info_specific operand_info_specific = 1;
  if (has_operand_info_specific()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operand_info_specific(), target);
  }
  
  // required sint32 bit_length = 2;
  if (has_bit_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bit_length(), target);
  }
  
  // optional .taint_info taint_info = 3;
  if (has_taint_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->taint_info(), target);
  }
  
  // required bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int value_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .operand_info_specific operand_info_specific = 1;
    if (has_operand_info_specific()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operand_info_specific());
    }
    
    // required sint32 bit_length = 2;
    if (has_bit_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bit_length());
    }
    
    // optional .taint_info taint_info = 3;
    if (has_taint_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_info());
    }
    
    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void value_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const value_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const value_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void value_info::MergeFrom(const value_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operand_info_specific()) {
      mutable_operand_info_specific()->::operand_info_specific::MergeFrom(from.operand_info_specific());
    }
    if (from.has_bit_length()) {
      set_bit_length(from.bit_length());
    }
    if (from.has_taint_info()) {
      mutable_taint_info()->::taint_info::MergeFrom(from.taint_info());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void value_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void value_info::CopyFrom(const value_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool value_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_operand_info_specific()) {
    if (!this->operand_info_specific().IsInitialized()) return false;
  }
  return true;
}

void value_info::Swap(value_info* other) {
  if (other != this) {
    std::swap(operand_info_specific_, other->operand_info_specific_);
    std::swap(bit_length_, other->bit_length_);
    std::swap(taint_info_, other->taint_info_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata value_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = value_info_descriptor_;
  metadata.reflection = value_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
